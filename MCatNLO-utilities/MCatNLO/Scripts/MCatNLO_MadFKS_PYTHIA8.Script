#!/bin/bash
# finds out architecture name, defines system files, and construct
# the relevant directory for run, if not present. If the architecture
# cannot be figured out, defines ./Run as working directory, and use 
# sun as system file -- it should work in most of the cases
function architecture {
PATH=".:""$PATH"
thisdir=`pwd`
homedir=$HOME
case `uname` in
Linux*) ARCHNAME=LinuxPY8 ; DBGFLAG='DEBUG=-ggdb' ; EXTRA='EXTRAOBJ=linux.o' ;
        EXMAKE=make ; CPOPT=pu ;;
OSF*)  ARCHNAME=AlphaPY8 ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=alpha.o' ;
       EXMAKE=gmake ; CPOPT=p ;;
Sun*) ARCHNAME=SunPY8 ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;
      EXMAKE=gmake ; CPOPT=p ;;
Darwin*) ARCHNAME=DarwinPY8 ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;
         EXMAKE=make ; CPOPT=p ;;
*) ARCHNAME=RunPY8 ; DBGFLAG='DEBUG=-g' ; EXTRA='EXTRAOBJ=sun.o' ;;
esac
#
}

# $? is the value of last executed command. A call to this function
# after a failure will cause the program to quit the script
function teststatus {
rc=$?
if [ 0 = $rc ]
then
:
else
echo $* did not succeed, exit status=$rc 
exit $rc
fi
}

# returns a string which identifies the target
# for the Makefile
function getSTRmake {
stringmake=MadFKS
}

# utility function for dothelinks
function stripextension {
echo $1 | sed "s/\..*\$//"
}

# utility function for dothelinks
function capitalize {
echo $1 | sed "y/abcdefghijklmnopqrstuvwxyz/ABCDEFGHIJKLMNOPQRSTUVWXYZ/"
}

# creates logical links for the PDF grid files. By P. Nason
function dothelinks {
if [ -d $PDFPATH ]
then
for i in ${PDFPATH}/*.dat ${PDFPATH}/*.tbl
do
if [ -f $i ]
then
name=`basename $i`
name=`stripextension $name`
case $name in
mrst200*) ;;
*mrs*|grpol|grvdm|lac1|pion[1-3]) name=`capitalize $name`;;
esac
if [ ! -L $thisdir/$name ] || [ ! $thisdir/$name -ef $i ]
then
ln -sf $i $thisdir/$name
fi
fi
done
for i in ${PDFPATH}/a02.*
do
if [ -f $i ]
then
name=`basename $i`
if [ ! -L $thisdir/$name ] || [ ! $thisdir/$name -ef $i ]
then
ln -sf $i $thisdir/$name
fi
fi
done
fi
}

# creates logical links for LHAPDF, and replaced PDF group name (unused
# by LHAPDF) with a LHAPDF-specific string
function linklhapdf {
case $LHAOFL in
FREEZE|freeze) PDFGROUP=LHAPDF ;;
EXTRAPOLATE|extrapolate) PDFGROUP=LHAEXT ;;
*) echo "no such option; failure in linklhapdf" ; exit 1 ;;
esac
source ../Source/fj_lhapdf_opts
}    

# creates the executable for NLO and MC; the entry of the function
# is either NLO or MC, depending on which executable one wants to obtain;
# PDFLIB or private PDF library is linked, depending on the value of
# the parameter UsedPdfLib, which is set by the function whichpdflib.
# Extra libraries are listed in the shell variable EXTRALIBS; do NOT
# remove the double quotes in the call to nameextralib, otherwise only
# the first library of the list is taken
function compile {
architecture

EVTDIR=`pwd`"/../Events"
# stops if event file is not in the /Events folder
EVT_NAMEF="$EVPREFIX"
if [ ! -f $EVTDIR/$EVT_NAMEF ]
then
  echo "Event file" $EVTDIR/$EVT_NAMEF "not found: quitting"
  exit 1
fi


if [ $PDLABEL = "'lhapdf'" ]
then
  PYTPDF='EXTPDF'
  PDFLIBRARY='LHAPDF'
  UsedPdfLib='LHAPDF'
  LHALIBPATH=`pwd`"/../"
  ln -sf $LHALIBPATH/bin/lhapdf-config $thisdir/$ARCHNAME/lhapdf-config
  LHALINK=DYNAMIC
  LHAOFL=FREEZE
  PDFGROUP='LHAPDF'
else
  PYTPDF='DEFAULT'
  PDFLIBRARY='THISLIB'
  UsedPdfLib='THISLIB'
# the following is dummy
  LHALINK=DYNAMIC
  LHAOFL=FREEZE
fi

whichpdflib $PDFLIBRARY
whichlhapdf $LHALINK
nameextralib "$EXTRALIBS"
pathextralib "$EXTRAPATHS"
pathextralibdyn "$EXTRAPATHS"
pathextraincl "$INCLUDEPATHS"
EXEC_NAME=
EXEC_NAMEF=
EXEC_NAMEFF=
PY8UTIMAKE="PY8UTI="$PY8UTI
PY8MAKE="PY8VER="$PY8VER
LIBSMAKE="EXTRALIBS="$ExtraLibs
LIBSMAKEP="EXTRAPATHS="$ExtraPaths
INCLMAKE="INCLOPTION="$ExtraIncl
INCDIRMK="INCDIR="`pwd`"/include"
SRCDIRMK="SRCDIR="`pwd`"/srcPythia8"
COMSRCMK="COMSRC="`pwd`"/srcCommon"
EVTDIR=`pwd`"/../Events"
if [ "$LD_LIBRARY_PATH" = "" ]
then
  LD_LIBRARY_PATH="$ExtraPathsDyn"
else
  if [ "$ExtraPathsDyn" != "" ]
  then
    LD_LIBRARY_PATH="$ExtraPathsDyn"":""$LD_LIBRARY_PATH"
  fi
fi
LIBSLHA="LHALIB="
case $1 in
NLO) echo "NLO must be computed with MadFKS"; exit 1 ;;
MC) if [ $UsedPdfLib = "PDFLIB" ]
     then
       EXEC_NAMEF="PY8_EXE_DEFAULT"
     elif [ $UsedPdfLib = "THISLIB" ]
     then
       EXEC_NAMEF="PY8_EXE_DEFAULT"
     elif [ $UsedPdfLib = "LHAPDF" ]
     then
       EXEC_NAMEF="PY8_EXE_LHAPDF"
     else
       echo "fatal error in compile"; exit 1
     fi ;;
*) echo "do not know what to do in function compile" ; exit 1 ;;
esac
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:$HEPMCPATH/lib
if [ $1 = "NLO" ]
then
  getSTRmake
  EXEC_NAME=$stringmake$EXEC_NAMEF
elif [ $1 = "MC" ]
then
  EXEC_NAME="$EXEC_NAMEF"
fi
EXEC_NAMEFF="$EXEPREFIX""$EXEC_NAMEF"

rm -f $thisdir/$EXEC_NAMEFF
# new compilation step for PY8 mode
export PYTHIA8LOCATION=$PY8PATH

cp -rf $thisdir/srcPythia8/Pythia8.cc $thisdir
cp -rf $thisdir/srcPythia8/Makefile $thisdir
if [ -f $thisdir/Pythia8.exe ]
then
  rm -rf $thisdir/Pythia8.exe
fi
cp -rf $PYTHIA8LOCATION/xmldoc $thisdir
make Pythia8

cd $thisdir
if [ ! -f $thisdir/Pythia8.exe ]
then
  echo "Pythia8 compilation did not succeed, exiting"
  exit -1
fi


teststatus Compilation
}

# foolproof utility function, to be called by the user
function compileMC {
compile MC
}

# wrapper for the functions which run and compile MC codes
function runMC {
compile MC



# Check correspondence between MCMODE and what written in the event file
if [ $MCMODE != "PYTHIA8" ]
then
  echo "Error! PYTHIA8 Script called with MCMODE not equal to PYTHIA8"
  exit 1
fi



UMASSPY=$UMASS
DMASSPY=$DMASS
SMASSPY=$SMASS
CMASSPY=$CMASS
BMASSPY=$BMASS
GMASSPY=$GMASS

if [ $BEAM1 == 1 ]; then iA=2212; elif [ $BEAM1 == -1 ]; then iA=-2212;
elif [ $BEAM1 == 0 ]; then iA=-11; elif [ $BEAM1 == 2 ]; then iA=2112;
elif [ $BEAM1 == -2 ]; then iA=-2112; else echo "Unrecognized incoming beam 1";
exit 1; fi
if [ $BEAM2 == 1 ]; then iB=2212; elif [ $BEAM2 == -1 ]; then iB=-2212;
elif [ $BEAM2 == 0 ]; then iB=11; elif [ $BEAM2 == 2 ]; then iB=2112;
elif [ $BEAM2 == -2 ]; then iB=-2112; else echo "Unrecognized incoming beam 2";
exit 1; fi
# Check the previous!

whichpytpdf $PYTPDF
if [ $pdftype = 1 ]
then
  whichpdflib $PDFLIBRARY
  if [ $UsedPdfLib = "THISLIB" ]
  then
    dothelinks
  elif [ $UsedPdfLib = "LHAPDF" ]
  then
    linklhapdf
  fi
fi
ERR_NUM_PY8=$(echo "$ERR_FR_PY8 * $NEVENTS" | bc)
ERR_NUM_PY8=${ERR_NUM_PY8/.*}
let "ERR_NUM_PY8 += 1"

echo " "
echo "*****   All parameters read from event file $EVT_NAMEF"
echo "*****   Now ready for showering" $NEVENTS "events with $MC_TYPE "
echo " "
runMCMadFKS
teststatus runMC
}

# compiles and runs the MC
function runMCMadFKS {
ifile="MCATNLO_"$MCMODE"_input"
ofile="MCATNLO_"$MCMODE"_output"
exefile="MCATNLO_"$MCMODE"_EXE"
touch $ofile
if [ -f $ifile ]
then
\rm ./$ifile 
fi
#mv $EXEC_NAMEFF $exefile
# create input file
cat <<EOF > $ifile

! 1) Settings used in the main program.
Main:numberOfEvents = $NEVENTS        ! Number of events
Main:timesAllowErrors = $ERR_NUM_PY8  ! Number of allowed errors
Main:showChangedSettings = on         ! Shows all non-default settings
Main:showChangedParticleData = off    ! Shows all non-default particle settings

! 2) Settings related to output in init(), next(), amd stat().
Init:showChangedSettings = on         ! Shows all non-default settings
Init:showChangedParticleData = off    ! Shows all non-default particle settings
Next:numberCount = 100                ! print message every n events
Next:numberShowInfo = 2               ! print event information n times
Next:numberShowProcess = 1            ! print process record n times
Next:numberShowEvent = $MAXPR_PY8     ! print event record n times
Stat:showProcessLevel = on            ! Process statistics
Stat:showErrors = on                  ! Error statistics

! 3) Beam-parameter settings.
Beams:idA = $iA                    ! Beam identities
Beams:idB = $iB                    ! Beam identities
Beams:frameType = 4                ! LHE initialization
Beams:LHEF = $EVT_NAMEF            ! Input LHE file

! 4) Switch on/off the key event-generation steps.
PDF:pSet = 7                       ! CTEQ6L
EOF
if [ $UsedPdfLib = "LHAPDF" ]
then
cat <<EOF >> $ifile
PDF:useLHAPDF = on                 ! Use of LHAPDF
EOF
else
cat <<EOF >> $ifile
PDF:useLHAPDF = off                ! Use of LHAPDF
EOF
fi

cat <<EOF >> $ifile
ProcessLevel:all = on              ! Generation
ProcessLevel:resonanceDecays = on  ! Resonance decays
PartonLevel:all = on               ! Paron level: if off, stops after hard process generation
EOF
if [ $UE_PY8 = ".FALSE." ]
then
cat <<EOF >> $ifile
PartonLevel:MPI = off              ! Multiple interactions
EOF
else
cat <<EOF >> $ifile
PartonLevel:MPI = on               ! Multiple interactions
EOF
fi

cat <<EOF >> $ifile
PartonLevel:ISR = on               ! Initial state shower
PartonLevel:FSR = on               ! Final state shower
PartonLevel:FSRinProcess = on      ! Final state shower in association with the hard process
PartonLevel:FSRinResonances = on   ! Final state shower in resonance decays
HadronLevel:all = on               ! Hadron level: if off, stops before hadronization
EOF

if [ $HADRONIZE_PY8 = ".FALSE." ]
then
cat <<EOF >> $ifile
HadronLevel:Hadronize = off         ! Hadronization
EOF
else
cat <<EOF >> $ifile
HadronLevel:Hadronize = on         ! Hadronization
EOF
fi

cat <<EOF >> $ifile
#HadronLevel:Decay = on             ! Hadron decays
PhaseSpace:mHatMin = 4.            ! Min invariant mass
PhaseSpace:mHatMax = -1.           ! Max invariant mass
PhaseSpace:pTHatMin = 0.           ! Min pT in 2->2
PhaseSpace:pTHatMax = -1.          ! Max pT in 2->2
PhaseSpace:pTHatMinDiverge = 1.    ! If massless final state, to avoid divergences
PhaseSpace:useBreitWigners = on    ! Masses according to Breit-Wigner
#PhaseSpace:pTHat3Min = 0.          ! Min pT for the hardest parton in 2->3
PhaseSpace:pTHat3Max = -1.         ! Max pT for the hardest parton in 2->3
PhaseSpace:pTHat5Min = 0.          ! Min pT for the softest parton in 2->3
PhaseSpace:pTHat5Max = -1.         ! Max pT for the softest parton in 2->3
PhaseSpace:RsepMin = 0.            ! Min R separation in 2->3

! 5) Final-state shower.
TimeShower:pTmaxMatch = 1          ! Use scalup (re-check)
TimeShower:pTmaxFudge = 1.         ! Factor changing the max scale
#TimeShower:alphaSvalue = 0.1383     ! Alpha_s(MZ) in final-state shower
#TimeShower:alphaSorder = 2         ! Alpha_s running order in final-state shower
#TimeShower:alphaorder = 0        ! Alpha_EM running order in final-state shower
TimeShower:interleave = on         ! If on, final-state emissions are interleaved in the same decreasing-pT chain as ISR
TimeShower:allowBeamRecoil = off   ! If off, no energy transfer to from the beam remnants
TimeShower:globalRecoil = on       ! All final-state particle recoil against the branching
TimeShower:QCDshower = on          ! QCD final-state shower
TimeShower:nGluonToQuark = 5       ! Number if flavors allowed in g->qqbar
TimeShower:QEDshowerByQ = off      ! Prevent quarks from radiating photons
TimeShower:QEDshowerByL = off      ! Prevent leptons from radiating photons
TimeShower:QEDshowerByGamma = off  ! Prevent photons from branching
TimeShower:MEcorrections = off     ! No Matrix-element corrections
TimeShower:phiPolAsym = on         ! Azimuthal asymmetry induced by gluon polarization

! 6) Initial-state shower.
SpaceShower:pTmaxMatch = 1         ! Use scalup (re-check)
SpaceShower:pTmaxFudge = 1.        ! Factor changing the max scale
#SpaceShower:alphaSvalue = 0.137    ! Alpha_s(MZ) in final-state shower
#SpaceShower:alphaSorder = 2        ! Alpha_s running order in final-state shower
#SpaceShower:alphaEMorder = 0       ! Alpha_EM running order in final-state shower
SpaceShower:QCDshower = on         ! QCD final-state shower
SpaceShower:QEDshowerByQ = off     ! Prevent quarks from radiating photons
SpaceShower:QEDshowerByL = off     ! Prevent leptons from radiating photons
SpaceShower:MEcorrections = off    ! No Matrix-element corrections
SpaceShower:MEafterFirst = off     ! No Matrix-element corrections after first emission
SpaceShower:phiPolAsym = on        ! Azimuthal asymmetry induced by gluon polarization
SpaceShower:nQuarkIn = 5          ! Number of flavors in g->qqbar and also in incoming beams
SpaceShower:rapidityorder = off    ! Do not order branchings in rapidity

! 7) Non-perturbative stuff.
BeamRemnants:primordialKT = off    ! No primordial kT

! 8) Particle characteristics.
5:m0 = $BMASS                      ! bottom mass
6:m0 = $TMASS                      ! top mass
23:m0 = $ZMASS                     ! Z mass
24:m0 = $WMASS                     ! W mass
25:m0 = $HGGMASS                   ! Higgs mass
6:mWidth = $TWIDTH                 ! top width
23:mWidth = $ZWIDTH                ! Z width
24:mWidth = $WWIDTH                ! W width
25:mWidth = $HGGWIDTH              ! Higgs width
EOF

if [ $PI_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
111:mayDecay = false                ! stable pi0
#211:mayDecay = false               ! stable pions
EOF
fi
if [ $B_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
511:maydecay = false                ! stable B hadrons 
521:maydecay = false                ! stable B hadrons
531:maydecay = false                ! stable B hadrons
541:maydecay = false                ! stable B hadrons
553:maydecay = false                ! stable B hadrons
5112:maydecay = false               ! stable B hadrons
5122:maydecay = false               ! stable B hadrons
5132:maydecay = false               ! stable B hadrons
5222:maydecay = false               ! stable B hadrons
5232:maydecay = false               ! stable B hadrons
5332:maydecay = false               ! stable B hadrons
EOF
fi
if [ $WP_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
24:maydecay = false               ! stable W+ boson
EOF
fi
if [ $WM_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
-24:maydecay = false               ! stable W- boson
EOF
fi
if [ $Z_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
23:maydecay = false               ! stable Z boson
EOF
fi
if [ $H_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
25:maydecay = false               ! stable Higgs boson
EOF
fi
if [ $TAUP_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
-15:maydecay = false               ! stable tau+
EOF
fi
if [ $TAUM_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
15:maydecay = false               ! stable tau-
EOF
fi
if [ $MUP_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
-13:maydecay = false               ! stable mu+
EOF
fi
if [ $MUM_STABLE_PY8 = ".TRUE." ]
then
cat <<EOF >> $ifile
13:maydecay = false               ! stable mu-
EOF
fi
if [ $RNDEVSEED_PY8 != 0 ]
then
cat <<EOF >> $ifile
Random:setSeed = on               ! random seed
Random:seed = $RNDEVSEED_PY8
EOF
fi

cp -f $thisdir/$ifile Pythia8.cmd
#./MCATNLO_PYTHIA8_EXE Pythia8.cmd > Pythia8.out
#cp -f Pythia8.out $thisdir/$ofile
#cd $thisdir

}

# this function set the parameter pdftype according to the value 
# of PYTPDF (the entry of this function) given in input
function whichpytpdf {
case $1 in
DEFAULT|default) pdftype=0 ;;
EXTPDF|extpdf) pdftype=1 ;;
*) echo "error in whichpytpdf: no such option" ; exit 1 ;;
esac
}

# checks that the value given to PDFLIBRAY in input is meaningful
function whichpdflib {
case $1 in
THISLIB|thislib) UsedPdfLib=THISLIB ;;
PDFLIB|pdflib) UsedPdfLib=PDFLIB ;;
LHAPDF|lhapdf) UsedPdfLib=LHAPDF ;;
*) echo "no such library for PDFS; failure in whichpdflib" ; exit 1 ;;
esac
}

# checks that the value given to LHALINK in input is meaningful
function whichlhapdf {
case $1 in
STATIC|static) UsedLhaPdf=lhasta ;;
DYNAMIC|dynamic) UsedLhaPdf=lhadyn ;;
*) echo "no such option for LHAPDF; failure in whichlhapdf" ; exit 1 ;;
esac
}

# prepends -l to library names
function nameextralib {
ExtraLibs="$1"
ilen1=${#ExtraLibs}
if [ $ilen1 -ne 0 ]
then
  ExtraLibs=`echo $ExtraLibs | sed "s/ / -l/g"`
  ExtraLibs="-l""$ExtraLibs"
fi
}

# prepends -L to library paths
function pathextralib {
ExtraPaths="$1"
ilen2=${#ExtraPaths}
if [ $ilen2 -ne 0 ]
then
  ExtraPaths=`echo $ExtraPaths | sed "s/ / -L/g"`
  ExtraPaths="-L""$ExtraPaths"
fi
}

# separate library names with columns
function pathextralibdyn {
ExtraPathsDyn="$1"
ilen3=${#ExtraPathsDyn}
if [ $ilen3 -ne 0 ]
then
  ExtraPathsDyn=`echo $ExtraPathsDyn | sed "s/ /:/g"`
fi
}

# prepends -I to include paths
function pathextraincl {
ExtraIncl="$1"
ilen4=${#ExtraIncl}
if [ $ilen4 -ne 0 ]
then
  ExtraIncl=`echo $ExtraIncl | sed "s/ / -I/g"`
  ExtraIncl="-I""$ExtraIncl"
fi
}

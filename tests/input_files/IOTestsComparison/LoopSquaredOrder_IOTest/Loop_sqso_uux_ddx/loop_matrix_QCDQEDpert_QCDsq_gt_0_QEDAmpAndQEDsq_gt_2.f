C     --=========================================--
C     Main subroutine
C     --=========================================--

      SUBROUTINE ML5_0_SLOOPMATRIX(P_USER,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities for the point in phase space P(0:3,NEXTERNAL)
C     and external lines W(0:6,NEXTERNAL)
C     
C     Process: u u~ > d d~  [ QCD QED ] QED^2>2 QCD^2>0
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      CHARACTER*512 PARAMFNAME,HELCONFIGFNAME,LOOPFILTERFNAME
      CHARACTER*512 COLORNUMFNAME,COLORDENOMFNAME, HELFILTERFNAME
      CHARACTER*512 PROC_PREFIX
      PARAMETER ( PARAMFNAME='MadLoopParams.dat')
      PARAMETER ( HELCONFIGFNAME='HelConfigs.dat')
      PARAMETER ( LOOPFILTERFNAME='LoopFilter.dat')
      PARAMETER ( HELFILTERFNAME='HelFilter.dat')
      PARAMETER ( COLORNUMFNAME='ColorNumFactors.dat')
      PARAMETER ( COLORDENOMFNAME='ColorDenomFactors.dat')
      PARAMETER ( PROC_PREFIX='ML5_0_')

      INTEGER NBORNAMPS
      PARAMETER (NBORNAMPS=4)
      INTEGER    NLOOPS, NLOOPGROUPS, NCTAMPS
      PARAMETER (NLOOPS=166, NLOOPGROUPS=51, NCTAMPS=96)
      INTEGER    NCOLORROWS
      PARAMETER (NCOLORROWS=262)
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      INTEGER    NWAVEFUNCS,NLOOPWAVEFUNCS
      PARAMETER (NWAVEFUNCS=12,NLOOPWAVEFUNCS=300)
      INTEGER MAXLWFSIZE
      PARAMETER (MAXLWFSIZE=4)
      INTEGER LOOPMAXCOEFS, VERTEXMAXCOEFS
      PARAMETER (LOOPMAXCOEFS=210, VERTEXMAXCOEFS=15)
      INTEGER    NCOMB
      PARAMETER (NCOMB=16)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      REAL*16     MP__ZERO
      PARAMETER (MP__ZERO=0E0_16)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
C     These are constants related to the split orders
      INCLUDE 'nsqso_born.inc'
      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=2, NSQUAREDSO=3, NAMPSO=4)
      INTEGER ANS_DIMENSION
      PARAMETER(ANS_DIMENSION=MAX(NSQSO_BORN,NSQUAREDSO))
      INTEGER NSQSOXNLG
      PARAMETER (NSQSOXNLG=NSQUAREDSO*NLOOPGROUPS)
      INTEGER NSQUAREDSOP1
      PARAMETER (NSQUAREDSOP1=NSQUAREDSO+1)
C     The total number of loop reduction libraries
C     At present, there are only CutTools,PJFry++,IREGI
      INTEGER NLOOPLIB
      PARAMETER (NLOOPLIB=3)
C     Only CutTools provides QP
      INTEGER QP_NLOOPLIB
      PARAMETER (QP_NLOOPLIB=1)
C     This parameter is designed for the check timing command of MG5
      LOGICAL SKIPLOOPEVAL
      PARAMETER (SKIPLOOPEVAL=.FALSE.)
      LOGICAL BOOTANDSTOP
      PARAMETER (BOOTANDSTOP=.FALSE.)
      INTEGER MAXSTABILITYLENGTH
      DATA MAXSTABILITYLENGTH/20/
      COMMON/ML5_0_STABILITY_TESTS/MAXSTABILITYLENGTH
C     
C     ARGUMENTS 
C     
      REAL*8 P_USER(0:3,NEXTERNAL)
C     
C     The zeroth component of the second dimension is the result
C      summed over all
C     contributing split orders. The zeroth component of the first one
C      is the Born.
C     Notice that the upper bound of the second integer is not number
C      of squared orders
C     combination for the loops but the maximum between this number
C      for the Born
C     contributions and the loop ones. There are some cases for which
C      the Born contrib.
C     has squared split order contributions than the loop does. For
C      example
C     
C     generate u u~ > d d~ QCD^2<=2 QED^2<=99 [virt=QCD]
C     
C     It is however somehow academical. This is why ANS_DIMENSION is
C      not just NSQSO but rather MAX(NSQSO,NSQSO_BORN)
C     
      REAL*8 ANS(0:3,0:ANS_DIMENSION)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,K,H,DUMMY,I_QP_LIB

      CHARACTER*512 PARAMFN,HELCONFIGFN,LOOPFILTERFN,COLORNUMFN
     $ ,COLORDENOMFN,HELFILTERFN
      CHARACTER*512 TMP
      SAVE PARAMFN
      SAVE HELCONFIGFN
      SAVE LOOPFILTERFN
      SAVE COLORNUMFN
      SAVE COLORDENOMFN
      SAVE HELFILTERFN

      INTEGER CTMODEINIT_BU
      REAL*8 MLSTABTHRES_BU
      INTEGER NEWHELREF
      LOGICAL HEL_INCONSISTENT
      REAL*8 P(0:3,NEXTERNAL)
C     DP_RES STORES THE DOUBLE PRECISION RESULT OBTAINED FROM
C      DIFFERENT EVALUATION METHODS IN ORDER TO ASSESS STABILITY.
C     THE STAB_STAGE COUNTER I CORRESPONDANCE GOES AS FOLLOWS
C     I=1 -> ORIGINAL PS, CTMODE=1
C     I=2 -> ORIGINAL PS, CTMODE=2, (ONLY WITH CTMODERUN=-1)
C     I=3 -> PS WITH ROTATION 1, CTMODE=1, (ONLY WITH CTMODERUN=-2)
C     I=4 -> PS WITH ROTATION 2, CTMODE=1, (ONLY WITH CTMODERUN=-3)
C     I=5 -> POSSIBLY MORE EVALUATION METHODS IN THE FUTURE, MAX IS
C      MAXSTABILITYLENGTH
C     IF UNSTABLE IT GOES TO THE SAME PATTERN BUT STAB_INDEX IS THEN
C      I+20.
      LOGICAL EVAL_DONE(MAXSTABILITYLENGTH)
      LOGICAL DOING_QP_EVALS
      INTEGER STAB_INDEX,BASIC_CT_MODE
      INTEGER N_DP_EVAL, N_QP_EVAL
      DATA N_DP_EVAL/1/
      DATA N_QP_EVAL/1/
      REAL*8 ACC(0:NSQUAREDSO)
      REAL*8 DP_RES(3,0:NSQUAREDSO,MAXSTABILITYLENGTH)
C     QP_RES STORES THE QUADRUPLE PRECISION RESULT OBTAINED FROM
C      DIFFERENT EVALUATION METHODS IN ORDER TO ASSESS STABILITY.
      REAL*8 QP_RES(3,0:NSQUAREDSO,MAXSTABILITYLENGTH)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
      INTEGER NATTEMPTS
      DATA NATTEMPTS/0/
      DATA IC/NEXTERNAL*1/
      REAL*8 HELSAVED(3,NCOMB)
      INTEGER ITEMP
      LOGICAL LTEMP
      REAL*8 BORNBUFF(0:NSQSO_BORN)
      REAL*8 BUFFR(3,0:NSQUAREDSO),BUFFR_BIS(3,0:NSQUAREDSO),TEMP(0:3
     $ ,0:NSQUAREDSO),TEMP1(0:NSQUAREDSO),TEMP2
      COMPLEX*16 COEFS(MAXLWFSIZE,0:VERTEXMAXCOEFS-1,MAXLWFSIZE)
      COMPLEX*16 CFTOT
      LOGICAL FOUNDHELFILTER,FOUNDLOOPFILTER
      DATA FOUNDHELFILTER/.TRUE./
      DATA FOUNDLOOPFILTER/.TRUE./
      LOGICAL LOOPFILTERBUFF(NSQUAREDSO,NLOOPGROUPS)
      DATA ((LOOPFILTERBUFF(J,I),J=1,NSQUAREDSO),I=1,NLOOPGROUPS)
     $ /NSQSOXNLG*.FALSE./

      INTEGER IDEN
      DATA IDEN/36/
      INTEGER HELAVGFACTOR
      DATA HELAVGFACTOR/4/
      LOGICAL DONEHELDOUBLECHECK
      DATA DONEHELDOUBLECHECK/.FALSE./
      INTEGER NEPS
      DATA NEPS/0/
C     Below are variables to bypass the checkphase and insure
C      stability check to take place
      LOGICAL OLD_CHECKPHASE, OLD_HELDOUBLECHECKED
      INTEGER OLD_GOODHEL(NCOMB)
      LOGICAL OLD_GOODAMP(NSQUAREDSO,NLOOPGROUPS)
      LOGICAL BYPASS_CHECK, ALWAYS_TEST_STABILITY
      COMMON/ML5_0_BYPASS_CHECK/BYPASS_CHECK, ALWAYS_TEST_STABILITY
C     
C     FUNCTIONS
C     
      INTEGER ML5_0_ML5SOINDEX_FOR_BORN_AMP
      INTEGER ML5_0_ML5SOINDEX_FOR_LOOP_AMP
      INTEGER ML5_0_ML5SQSOINDEX
      INTEGER ML5_0_ISSAME
      LOGICAL ML5_0_ISZERO
      INTEGER SET_RET_CODE_U
C     
C     GLOBAL VARIABLES
C     
      INCLUDE 'coupl.inc'
      INCLUDE 'mp_coupl.inc'
      INCLUDE 'MadLoopParams.inc'

      LOGICAL CHOSEN_SO_CONFIGS(NSQUAREDSO)
      DATA CHOSEN_SO_CONFIGS/.FALSE.,.TRUE.,.FALSE./
      COMMON/ML5_0_CHOSEN_LOOP_SQSO/CHOSEN_SO_CONFIGS

      LOGICAL CHECKPHASE
      DATA CHECKPHASE/.TRUE./
      LOGICAL HELDOUBLECHECKED
      DATA HELDOUBLECHECKED/.FALSE./
      COMMON/ML5_0_INIT/CHECKPHASE, HELDOUBLECHECKED
      INTEGER NTRY
      DATA NTRY/0/
      REAL*8 REF
      DATA REF/0.0D0/

      LOGICAL MP_DONE
      DATA MP_DONE/.FALSE./
      COMMON/ML5_0_MP_DONE/MP_DONE
C     A FLAG TO DENOTE WHETHER THE CORRESPONDING LOOPLIBS ARE
C      AVAILABLE OR NOT
      LOGICAL LOOPLIBS_AVAILABLE(3)
      DATA LOOPLIBS_AVAILABLE /.TRUE.,.TRUE.,.TRUE./
      COMMON/ML5_0_LOOPLIBS_AV/ LOOPLIBS_AVAILABLE

C     PS CAN POSSIBILY BE PASSED THROUGH IMPROVE_PS BUT IS NOT
C      MODIFIED FOR THE PURPOSE OF THE STABILITY TEST
C     EVEN THOUGH THEY ARE PUT IN COMMON BLOCK, FOR NOW THEY ARE NOT
C      USED ANYWHERE ELSE
      REAL*8 PS(0:3,NEXTERNAL)
      COMMON/ML5_0_PSPOINT/PS
C     AGAIN BELOW, MP_PS IS THE FIXED (POSSIBLY IMPROVED) MP PS POINT
C      AND MP_P IS THE ONE WHICH CAN BE MODIFIED (I.E. ROTATED ETC.)
C      FOR STABILITY PURPOSE
      REAL*16 MP_PS(0:3,NEXTERNAL),MP_P(0:3,NEXTERNAL)
      COMMON/ML5_0_MP_PSPOINT/MP_PS,MP_P

      REAL*8 LSCALE
      INTEGER CTMODE
      COMMON/ML5_0_CT/LSCALE,CTMODE
      LOGICAL MP_PS_SET
      DATA MP_PS_SET/.FALSE./

C     The parameter below sets the convention for the helicity filter
C     For a given helicity, the attached integer 'i' means
C     'i' in ]-inf;-HELOFFSET[ -> Helicity is equal, up to a sign, to
C      helicity number abs(i+HELOFFSET)
C     'i' == -HELOFFSET        -> Helicity is analytically zero
C     'i' in ]-HELOFFSET,inf[  -> Helicity is contributing with weight
C      'i'. If it is zero, it is skipped.
C     Typically, the hel_offset is 10000
      INTEGER HELOFFSET
      DATA HELOFFSET/10000/
      INTEGER GOODHEL(NCOMB)
      LOGICAL GOODAMP(NSQUAREDSO,NLOOPGROUPS)
      COMMON/ML5_0_FILTERS/GOODAMP,GOODHEL,HELOFFSET

      INTEGER HELPICKED
      DATA HELPICKED/-1/
      COMMON/ML5_0_HELCHOICE/HELPICKED
      INTEGER USERHEL
      DATA USERHEL/-1/
      COMMON/ML5_0_USERCHOICE/USERHEL

C     This integer can be accessed by an external user to set its
C      target squared split order.
C     If set to a value different than -1, the code will try to avoid
C      computing anything which
C     does not contribute to contributions of squared split orders
C      SQSO_TARGET and below.
      INTEGER SQSO_TARGET
      DATA SQSO_TARGET/-1/
      COMMON/ML5_0_SOCHOICE/SQSO_TARGET
C     The following logical are used to broadcast the fact that the
C      target 'required' CT and
C     loop split orders contributions have been reached already and
C      the rest can be skipped.
      LOGICAL UVCT_REQ_SO_DONE,MP_UVCT_REQ_SO_DONE,CT_REQ_SO_DONE
     $ ,MP_CT_REQ_SO_DONE,LOOP_REQ_SO_DONE,MP_LOOP_REQ_SO_DONE
     $ ,CTCALL_REQ_SO_DONE,FILTER_SO
      DATA UVCT_REQ_SO_DONE/.FALSE./
      DATA MP_UVCT_REQ_SO_DONE/.FALSE./
      DATA CT_REQ_SO_DONE/.FALSE./
      DATA MP_CT_REQ_SO_DONE/.FALSE./
      DATA LOOP_REQ_SO_DONE/.FALSE./
      DATA MP_LOOP_REQ_SO_DONE/.FALSE./
      DATA CTCALL_REQ_SO_DONE/.FALSE./
      DATA FILTER_SO/.FALSE./
      COMMON/ML5_0_SO_REQS/UVCT_REQ_SO_DONE,MP_UVCT_REQ_SO_DONE
     $ ,CT_REQ_SO_DONE,MP_CT_REQ_SO_DONE,LOOP_REQ_SO_DONE,MP_LOOP_REQ_S
     $ O_DONE,CTCALL_REQ_SO_DONE,FILTER_SO

      INTEGER I_SO
      DATA I_SO/1/
      COMMON/ML5_0_I_SO/I_SO
      INTEGER I_LIB
      DATA I_LIB/1/
      COMMON/ML5_0_I_LIB/I_LIB
C     TILL NOW, ONLY CUTTOOLS PROVIDE QP
      LOGICAL QP_TOOLS_AVAILABLE
      DATA QP_TOOLS_AVAILABLE/.FALSE./
      INTEGER INDEX_QP_TOOLS(QP_NLOOPLIB+1)
      COMMON/ML5_0_LOOP_TOOLS/QP_TOOLS_AVAILABLE,INDEX_QP_TOOLS

      COMPLEX*16 AMP(NBORNAMPS)
      COMMON/ML5_0_AMPS/AMP
      COMPLEX*16 W(20,NWAVEFUNCS)
      COMMON/ML5_0_W/W

      COMPLEX*32 MPW(20,NWAVEFUNCS)
      COMMON/ML5_0_MP_W/MPW

      COMPLEX*16 WL(MAXLWFSIZE,0:LOOPMAXCOEFS-1,MAXLWFSIZE,0:NLOOPWAVEF
     $ UNCS)
      COMPLEX*16 PL(0:3,0:NLOOPWAVEFUNCS)
      COMMON/ML5_0_WL/WL,PL

      COMPLEX*16 LOOPCOEFS(0:LOOPMAXCOEFS-1,NSQUAREDSO,NLOOPGROUPS)
      COMMON/ML5_0_LCOEFS/LOOPCOEFS

      COMPLEX*16 AMPL(3,NCTAMPS)
      COMMON/ML5_0_AMPL/AMPL

      COMPLEX*16 LOOPRES(3,NSQUAREDSO,NLOOPGROUPS)
      LOGICAL S(NSQUAREDSO,NLOOPGROUPS)
      COMMON/ML5_0_LOOPRES/LOOPRES,S

      INTEGER CF_D(NCOLORROWS,NBORNAMPS)
      INTEGER CF_N(NCOLORROWS,NBORNAMPS)
      COMMON/ML5_0_CF/CF_D,CF_N

      INTEGER HELC(NEXTERNAL,NCOMB)
      COMMON/ML5_0_HELCONFIGS/HELC

      REAL*8 PREC,USER_STAB_PREC
      DATA USER_STAB_PREC/-1.0D0/
      COMMON/ML5_0_USER_STAB_PREC/USER_STAB_PREC

C     Return codes H,T,U correspond to the hundreds, tens and units
C     building returncode, i.e.
C     RETURNCODE=100*RET_CODE_H+10*RET_CODE_T+RET_CODE_U

      INTEGER RET_CODE_H,RET_CODE_T,RET_CODE_U
      REAL*8 ACCURACY(0:NSQUAREDSO)
      DATA (ACCURACY(I),I=0,NSQUAREDSO)/NSQUAREDSOP1*1.0D0/
      DATA RET_CODE_H,RET_CODE_T,RET_CODE_U/1,1,0/
      COMMON/ML5_0_ACC/ACCURACY,RET_CODE_H,RET_CODE_T,RET_CODE_U

      LOGICAL MP_DONE_ONCE
      DATA MP_DONE_ONCE/.FALSE./
      COMMON/ML5_0_MP_DONE_ONCE/MP_DONE_ONCE

      CHARACTER(512) MLPATH
      COMMON/MLPATH/MLPATH

      LOGICAL ML_INIT
      COMMON/ML_INIT/ML_INIT

C     ----------
C     BEGIN CODE
C     ----------

      IF(ML_INIT) THEN
        TMP = 'auto'
        CALL SETMADLOOPPATH(TMP)
        CALL JOINPATH(MLPATH,PARAMFNAME,PARAMFN)
        CALL MADLOOPPARAMREADER(PARAMFN,.TRUE.)
        ML_INIT = .FALSE.
      ENDIF

      IF(NTRY.EQ.0) THEN
C       CALL MADLOOPPARAMREADER(paramFileName,.TRUE.)
        QP_TOOLS_AVAILABLE=.FALSE.
        INDEX_QP_TOOLS(1:QP_NLOOPLIB+1)=0
C       SKIP THE ONES THAT NOT AVAILABLE
        J=1
        DO I=1,NLOOPLIB
          IF(MLREDUCTIONLIB(J).EQ.0)EXIT
          IF(.NOT.LOOPLIBS_AVAILABLE(MLREDUCTIONLIB(J)))THEN
            MLREDUCTIONLIB(J:NLOOPLIB-1)=MLREDUCTIONLIB(J+1:NLOOPLIB)
            MLREDUCTIONLIB(NLOOPLIB)=0
          ELSE
            J=J+1
          ENDIF
        ENDDO
        IF(MLREDUCTIONLIB(1).EQ.0)THEN
          STOP 'No available loop reduction lib is provided. Make sur'
     $     //'e MLReductionLib is correct.'
        ENDIF
        J=0
        DO I=1,NLOOPLIB
          IF(MLREDUCTIONLIB(I).EQ.1)THEN
            J=J+1
            IF(.NOT.QP_TOOLS_AVAILABLE)QP_TOOLS_AVAILABLE=.TRUE.
            INDEX_QP_TOOLS(J)=I
          ENDIF
        ENDDO

C       Setup the file paths
        CALL JOINPATH(MLPATH,PARAMFNAME,PARAMFN)
        CALL JOINPATH(MLPATH,PROC_PREFIX,TMP)
        CALL JOINPATH(TMP,HELCONFIGFNAME,HELCONFIGFN)
        CALL JOINPATH(TMP,LOOPFILTERFNAME,LOOPFILTERFN)
        CALL JOINPATH(TMP,COLORNUMFNAME,COLORNUMFN)
        CALL JOINPATH(TMP,COLORDENOMFNAME,COLORDENOMFN)
        CALL JOINPATH(TMP,HELFILTERFNAME,HELFILTERFN)

        CALL ML5_0_SET_N_EVALS(N_DP_EVAL,N_QP_EVAL)

        HELDOUBLECHECKED=.NOT.DOUBLECHECKHELICITYFILTER
        OPEN(1, FILE=LOOPFILTERFN, ERR=100, STATUS='OLD',          
     $    ACTION='READ')
        DO J=1,NLOOPGROUPS
          READ(1,*,END=101) (GOODAMP(I,J),I=1,NSQUAREDSO)
        ENDDO
        GOTO 101
 100    CONTINUE
        FOUNDLOOPFILTER=.FALSE.
        DO J=1,NLOOPGROUPS
          DO I=1,NSQUAREDSO
            GOODAMP(I,J)=(.NOT.USELOOPFILTER)
          ENDDO
        ENDDO
 101    CONTINUE
        CLOSE(1)

        OPEN(1, FILE=HELFILTERFN, ERR=102, STATUS='OLD',          
     $    ACTION='READ')
        DO I=1,NCOMB
          READ(1,*,END=103) GOODHEL(I)
        ENDDO
        GOTO 103
 102    CONTINUE
        FOUNDHELFILTER=.FALSE.
        DO J=1,NCOMB
          GOODHEL(J)=1
        ENDDO
 103    CONTINUE
        CLOSE(1)

        OPEN(1, FILE=COLORNUMFN, ERR=104, STATUS='OLD',          
     $    ACTION='READ')
        DO I=1,NCOLORROWS
          READ(1,*,END=105) (CF_N(I,J),J=1,NBORNAMPS)
        ENDDO
        GOTO 105
 104    CONTINUE
        STOP 'Color factors could not be initialized from fil'
     $   //'e ML5_0_ColorNumFactors.dat. File not found'
 105    CONTINUE
        CLOSE(1)
        OPEN(1, FILE=COLORDENOMFN, ERR=106, STATUS='OLD',          
     $    ACTION='READ')
        DO I=1,NCOLORROWS
          READ(1,*,END=107) (CF_D(I,J),J=1,NBORNAMPS)
        ENDDO
        GOTO 107
 106    CONTINUE
        STOP 'Color factors could not be initialized from fil'
     $   //'e ML5_0_ColorDenomFactors.dat. File not found'
 107    CONTINUE
        CLOSE(1)
        OPEN(1, FILE=HELCONFIGFN, ERR=108, STATUS='OLD',              
     $       ACTION='READ')
        DO H=1,NCOMB
          READ(1,*,END=109) (HELC(I,H),I=1,NEXTERNAL)
        ENDDO
        GOTO 109
 108    CONTINUE
        STOP 'Color helictiy configurations could not be initialize'
     $   //'d from file ML5_0_HelConfigs.dat. File not found'
 109    CONTINUE
        CLOSE(1)

C       SETUP OF THE COMMON STARTING EXTERNAL LOOP WAVEFUNCTION
C       IT IS ALSO PS POINT INDEPENDENT, SO IT CAN BE DONE HERE.
        DO I=0,3
          PL(I,0)=(0.0D0,0.0D0)
        ENDDO
        DO I=1,MAXLWFSIZE
          DO J=0,LOOPMAXCOEFS-1
            DO K=1,MAXLWFSIZE
              IF(I.EQ.K.AND.J.EQ.0) THEN
                WL(I,J,K,0)=(1.0D0,0.0D0)
              ELSE
                WL(I,J,K,0)=(0.0D0,0.0D0)
              ENDIF
            ENDDO
          ENDDO
        ENDDO
        IF(BOOTANDSTOP) THEN
          WRITE(*,*) 'Stopped by user request.'
          STOP
        ENDIF
      ENDIF


C     First compute the borns, it will store them in ANS(0,I)
C     It is left untouched for the rest of MadLoop evaluation.
C     Notice that the squared split order index I does NOT
C     correspond to the same ordering of J for the loop ME 
C     results stored in ANS(K,J), with K in [1-3].The ordering 
C     of each can be obtained with ML5SOINDEX_FOR_SQUARED_ORDERS 
C     and SQSOINDEX_FROM_ORDERS for the loop ME and born ME 
C     respectively. For this to work, we assume that there is 
C     always more squared split orders in the loop ME than in the
C     born ME, which is practically always true. In any case, only
C     the split_order summed value I=0 is used in ML5 code.
      DO I=0,NSQSO_BORN
        BORNBUFF(I)=0.0D0
      ENDDO
      CALL ML5_0_SMATRIXHEL_SPLITORDERS(P_USER,USERHEL,BORNBUFF(0))
      DO I=0,NSQSO_BORN
        ANS(0,I)=BORNBUFF(I)
      ENDDO


C     We set here the reference to the born summed over all split
C      orders
      REF=0.0D0
      DO I=1,NSQSO_BORN
        REF=REF+ANS(0,I)
      ENDDO

      MP_DONE=.FALSE.
      MP_DONE_ONCE=.FALSE.
      MP_PS_SET=.FALSE.
      STAB_INDEX=0
      DOING_QP_EVALS=.FALSE.
      EVAL_DONE(1)=.TRUE.
      DO I=2,MAXSTABILITYLENGTH
        EVAL_DONE(I)=.FALSE.
      ENDDO

      IF(.NOT.BYPASS_CHECK) THEN
        NTRY=NTRY+1
      ENDIF

      IF (USER_STAB_PREC.GT.0.0D0) THEN
        MLSTABTHRES_BU=MLSTABTHRES
        MLSTABTHRES=USER_STAB_PREC
C       In the initialization, I cannot perform stability test and
C        therefore guarantee any precision
        CTMODEINIT_BU=CTMODEINIT
C       So either one choses quad precision directly
C       CTMODEINIT=4
C       Or, because this is very slow, we keep the orignal value. The
C        accuracy returned is -1 and tells the MC that he should not
C        trust the evaluation for checks.
        CTMODEINIT=CTMODEINIT_BU
      ENDIF

      IF(DONEHELDOUBLECHECK.AND.(.NOT.HELDOUBLECHECKED)) THEN
        HELDOUBLECHECKED=.TRUE.
        DONEHELDOUBLECHECK=.FALSE.
      ENDIF

      CHECKPHASE=(NTRY.LE.CHECKCYCLE).AND.(((.NOT.FOUNDLOOPFILTER
     $ ).AND.USELOOPFILTER).OR.(.NOT.FOUNDHELFILTER))

      IF (WRITEOUTFILTERS) THEN
        IF ((.NOT. CHECKPHASE).AND.(.NOT.FOUNDHELFILTER)) THEN

          OPEN(1, FILE=HELFILTERFN, ERR=110, STATUS='NEW',ACTION='WRIT'
     $     //'E')
          DO I=1,NCOMB
            WRITE(1,*) GOODHEL(I)
          ENDDO
 110      CONTINUE
          CLOSE(1)
          FOUNDHELFILTER=.TRUE.
        ENDIF

        IF ((.NOT. CHECKPHASE).AND.(.NOT.FOUNDLOOPFILTER).AND.USELOOPFI
     $   LTER) THEN
          OPEN(1, FILE=LOOPFILTERFN, ERR=111, STATUS='NEW',ACTION='WRI'
     $     //'TE')
          DO J=1,NLOOPGROUPS
            WRITE(1,*) (GOODAMP(I,J),I=1,NSQUAREDSO)
          ENDDO
 111      CONTINUE
          CLOSE(1)
          FOUNDLOOPFILTER=.TRUE.
        ENDIF
      ENDIF

      IF (BYPASS_CHECK) THEN
        OLD_CHECKPHASE = CHECKPHASE
        OLD_HELDOUBLECHECKED = HELDOUBLECHECKED
        CHECKPHASE = .FALSE.
        HELDOUBLECHECKED = .TRUE.
        DO I=1,NCOMB
          OLD_GOODHEL(I)=GOODHEL(I)
          GOODHEL(I)=1
        ENDDO
        DO I=1,NSQUAREDSO
          DO J=1,NLOOPGROUPS
            OLD_GOODAMP(I,J)=GOODAMP(I,J)
            GOODAMP(I,J)=.TRUE.
          ENDDO
        ENDDO
      ENDIF

      IF(CHECKPHASE.OR.(.NOT.HELDOUBLECHECKED)) THEN
        HELPICKED=1
        CTMODE=CTMODEINIT
      ELSE
        IF (USERHEL.NE.-1) THEN
          IF(GOODHEL(USERHEL).EQ.-HELOFFSET) THEN
            DO I=0,NSQUAREDSO
              ANS(1,I)=0.0D0
              ANS(2,I)=0.0D0
              ANS(3,I)=0.0D0
            ENDDO
            GOTO 9999
          ENDIF
        ENDIF
        HELPICKED=USERHEL
        IF (CTMODERUN.NE.-1) THEN
          CTMODE=CTMODERUN
        ELSE
          CTMODE=1
        ENDIF
      ENDIF

      DO I=1,NEXTERNAL
        DO J=0,3
          PS(J,I)=P_USER(J,I)
        ENDDO
      ENDDO

      IF (IMPROVEPSPOINT.GE.0) THEN
C       Make the input PS more precise (exact onshell and energy-moment
C       um conservation)
        CALL ML5_0_IMPROVE_PS_POINT_PRECISION(PS)
      ENDIF

      DO I=1,NEXTERNAL
        DO J=0,3
          P(J,I)=PS(J,I)
        ENDDO
      ENDDO

      DO K=1, 3
        DO I=0,NSQUAREDSO
          BUFFR(K,I)=0.0D0
        ENDDO
        DO I=1,NCTAMPS
          AMPL(K,I)=(0.0D0,0.0D0)
        ENDDO
      ENDDO
C     USE THE FIRST LOOP REDUCTION LIBRARY AND THE FIRST QP LOOP
C      REDUCTION LIBRARY
      I_LIB=1
      I_QP_LIB=1
 200  CONTINUE

      IF (.NOT.MP_PS_SET.AND.(CTMODE.EQ.0.OR.CTMODE.GE.4)) THEN
        CALL ML5_0_SET_MP_PS(P_USER)
        MP_PS_SET = .TRUE.
      ENDIF

      LSCALE=DSQRT(ABS((P(0,1)+P(0,2))**2-(P(1,1)+P(1,2))**2-(P(2,1)
     $ +P(2,2))**2-(P(3,1)+P(3,2))**2))

      CTCALL_REQ_SO_DONE=.FALSE.
      FILTER_SO = (.NOT.CHECKPHASE).AND.HELDOUBLECHECKED.AND.(SQSO_TARG
     $ ET.NE.-1)

      DO I=1,NLOOPGROUPS
        DO J=0,LOOPMAXCOEFS-1
          DO K=1,NSQUAREDSO
            LOOPCOEFS(J,K,I)=(0.0D0,0.0D0)
          ENDDO
        ENDDO
      ENDDO

      DO I=1,NLOOPGROUPS
        DO J=1,3
          DO K=1,NSQUAREDSO
            LOOPRES(J,K,I)=0.0D0
          ENDDO
        ENDDO
      ENDDO

      DO K=1,3
        DO I=0,NSQUAREDSO
          ANS(K,I)=0.0D0
        ENDDO
      ENDDO

C     Check if we directly go to multiple precision
      IF (CTMODE.GE.4) THEN
        IF (.NOT.MP_DONE) THEN
          CALL ML5_0_MP_COMPUTE_LOOP_COEFS(MP_P,BUFFR_BIS)
C         It should be safe to directly set MP_DONE to true already
C          here. But maybe I overlooked something.
          MP_DONE=.TRUE.
        ENDIF
C       Even if MP_DONE is .TRUE. we should anyway skip the
C       double precision evaluation as it as already been
C       computed in quadruple precision.
        GOTO 300
      ENDIF

      DO H=1,NCOMB
        IF ((HELPICKED.EQ.H).OR.((HELPICKED.EQ.-1).AND.(CHECKPHASE.OR.(
     $   .NOT.HELDOUBLECHECKED).OR.(GOODHEL(H).GT.-HELOFFSET.AND.GOODHE
     $   L(H).NE.0)))) THEN
          DO I=1,NEXTERNAL
            NHEL(I)=HELC(I,H)
          ENDDO

          UVCT_REQ_SO_DONE=.FALSE.
          CT_REQ_SO_DONE=.FALSE.
          LOOP_REQ_SO_DONE=.FALSE.

C         Helas calls for the born amplitudes and counterterms
C          associated to given loops
          CALL IXXXXX(P(0,1),ZERO,NHEL(1),+1*IC(1),W(1,1))
          CALL OXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
          CALL OXXXXX(P(0,3),ZERO,NHEL(3),+1*IC(3),W(1,3))
          CALL IXXXXX(P(0,4),ZERO,NHEL(4),-1*IC(4),W(1,4))
          CALL FFV1P0_3(W(1,1),W(1,2),GC_11,ZERO,ZERO,W(1,5))
C         Amplitude(s) for born diagram with ID 1
          CALL FFV1_0(W(1,4),W(1,3),W(1,5),GC_11,AMP(1))
          CALL FFV1P0_3(W(1,1),W(1,2),GC_2,ZERO,ZERO,W(1,6))
C         Amplitude(s) for born diagram with ID 2
          CALL FFV1_0(W(1,4),W(1,3),W(1,6),GC_1,AMP(2))
          CALL FFV2_5_3(W(1,1),W(1,2),GC_69,GC_76,MDL_MZ,ZERO,W(1,7))
C         Amplitude(s) for born diagram with ID 3
          CALL FFV2_3_0(W(1,4),W(1,3),W(1,7),GC_68,GC_76,AMP(3))
          CALL FFV2_3(W(1,1),W(1,3),GC_132,MDL_MW,ZERO,W(1,8))
C         Amplitude(s) for born diagram with ID 4
          CALL FFV2_0(W(1,4),W(1,2),W(1,8),GC_132,AMP(4))
C         Counter-term amplitude(s) for loop diagram number 5
          CALL FFV1_0(W(1,4),W(1,3),W(1,6),R2_DDA,AMPL(1,1))
C         Counter-term amplitude(s) for loop diagram number 6
          CALL FFV2_3_0(W(1,4),W(1,3),W(1,7),R2_DDZ_V2,R2_DDZ_V3
     $     ,AMPL(1,2))
C         Counter-term amplitude(s) for loop diagram number 7
          CALL FFV2_0(W(1,4),W(1,2),W(1,8),R2_UXDW,AMPL(1,3))
          CALL FFV2_3(W(1,4),W(1,2),GC_132,MDL_MW,ZERO,W(1,9))
C         Counter-term amplitude(s) for loop diagram number 8
          CALL FFV2_0(W(1,1),W(1,3),W(1,9),R2_UXDW,AMPL(1,4))
          CALL FFV1P0_3(W(1,4),W(1,3),GC_1,ZERO,ZERO,W(1,10))
C         Counter-term amplitude(s) for loop diagram number 10
          CALL FFV1_0(W(1,1),W(1,2),W(1,10),R2_UUA,AMPL(1,5))
          CALL FFV2_3_3(W(1,4),W(1,3),GC_68,GC_76,MDL_MZ,ZERO,W(1,11))
C         Counter-term amplitude(s) for loop diagram number 11
          CALL FFV2_5_0(W(1,1),W(1,2),W(1,11),R2_UUZ_V2,R2_DDZ_V3
     $     ,AMPL(1,6))
C         Counter-term amplitude(s) for loop diagram number 23
          CALL FFV2_6_0(W(1,4),W(1,3),W(1,5),UV_GDDLEW,UV_GDDREW
     $     ,AMPL(1,7))
          CALL FFV2_6_0(W(1,4),W(1,3),W(1,5),UV_GSSLEW_1EPS,UV_GSSREW_1
     $     EPS,AMPL(2,8))
          CALL FFV2_0(W(1,4),W(1,3),W(1,5),R2_GUU2CPD,AMPL(1,9))
          CALL FFV1P0_3(W(1,4),W(1,3),GC_11,ZERO,ZERO,W(1,12))
C         Counter-term amplitude(s) for loop diagram number 24
          CALL FFV2_6_0(W(1,1),W(1,2),W(1,12),UV_GCCLEW,UV_GUUREW
     $     ,AMPL(1,10))
          CALL FFV2_6_0(W(1,1),W(1,2),W(1,12),UV_GUULEW_1EPS,UV_GCCREW_
     $     1EPS,AMPL(2,11))
C         Counter-term amplitude(s) for loop diagram number 25
          CALL FFV2_6_0(W(1,1),W(1,2),W(1,12),R2_GDD2CP,R2_GCC2CM
     $     ,AMPL(1,12))
C         Counter-term amplitude(s) for loop diagram number 27
          CALL FFV2_6_0(W(1,4),W(1,3),W(1,5),R2_GDD2CP,R2_GDD2CM
     $     ,AMPL(1,13))
C         Counter-term amplitude(s) for loop diagram number 28
          CALL FFV2_0(W(1,1),W(1,2),W(1,12),R2_GUU2CPD,AMPL(1,14))
C         At this point, all CT amps needed for (QCD=4 QED=2), i.e. of
C          split order ID=0, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.1) GOTO 2000
C         Counter-term amplitude(s) for loop diagram number 29
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAU,AMPL(1,15))
C         Counter-term amplitude(s) for loop diagram number 30
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZU,AMPL(1,16))
C         Counter-term amplitude(s) for loop diagram number 31
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZU,AMPL(1,17))
C         Counter-term amplitude(s) for loop diagram number 32
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZU,AMPL(1,18))
C         Counter-term amplitude(s) for loop diagram number 33
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,4),W(1,3),W(1,6),C_UVSXSA1EW
     $     ,C_UVDXDA2EW,AMPL(1,19))
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,4),W(1,3),W(1,6),C_UVDXDA1EW
     $     _1EPS,C_UVDXDA2EW_1EPS,AMPL(2,20))
          CALL FFV2_0(W(1,4),W(1,3),W(1,6),R2_SSA2CP_C,AMPL(1,21))
C         Counter-term amplitude(s) for loop diagram number 34
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,4),W(1,3),W(1,7),C_UVDXDZ1EW
     $     ,C_UVSXSZ2EW,AMPL(1,22))
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,4),W(1,3),W(1,7),C_UVSXSZ1EW
     $     _1EPS,C_UVSXSZ2EW_1EPS,AMPL(2,23))
          CALL FFV2_0(W(1,4),W(1,3),W(1,7),R2_DDZ2CP_U,AMPL(1,24))
C         Counter-term amplitude(s) for loop diagram number 37
          CALL R2_GG_1_0(W(1,8),W(1,9),R2_WWUD1,AMPL(1,25))
C         Counter-term amplitude(s) for loop diagram number 38
          CALL L_VEXVEA21_0(W(1,4),W(1,2),W(1,8),C_UVSXCWM1EW,AMPL(1
     $     ,26))
          CALL L_VEXVEA21_0(W(1,4),W(1,2),W(1,8),C_UVDXUWM1EW_1EPS
     $     ,AMPL(2,27))
C         Counter-term amplitude(s) for loop diagram number 39
          CALL FFV2_0(W(1,4),W(1,2),W(1,8),R2_TXBW2CP,AMPL(1,28))
C         Counter-term amplitude(s) for loop diagram number 42
          CALL L_VEXVEA21_0(W(1,1),W(1,3),W(1,9),C_UVUXDWP1EW,AMPL(1
     $     ,29))
          CALL L_VEXVEA21_0(W(1,1),W(1,3),W(1,9),C_UVDXUWM1EW_1EPS
     $     ,AMPL(2,30))
C         Counter-term amplitude(s) for loop diagram number 43
          CALL FFV2_0(W(1,1),W(1,3),W(1,9),R2_TXBW2CP,AMPL(1,31))
C         Counter-term amplitude(s) for loop diagram number 54
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,1),W(1,2),W(1,10),C_UVCXCA1E
     $     W,C_UVUXUA2EW,AMPL(1,32))
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,1),W(1,2),W(1,10),C_UVUXUA1E
     $     W_1EPS,C_UVCXCA2EW_1EPS,AMPL(2,33))
C         Counter-term amplitude(s) for loop diagram number 55
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,1),W(1,2),W(1,11),C_UVUXUZ1E
     $     W,C_UVCXCZ2EW,AMPL(1,34))
          CALL L_VEXVEA21_L_VEXVEA22_0(W(1,1),W(1,2),W(1,11),C_UVUXUZ1E
     $     W_1EPS,C_UVUXUZ2EW_1EPS,AMPL(2,35))
C         Counter-term amplitude(s) for loop diagram number 56
          CALL FFV2_6_0(W(1,1),W(1,2),W(1,10),R2_UUA2CP,R2_UUA2CM
     $     ,AMPL(1,36))
C         Counter-term amplitude(s) for loop diagram number 57
          CALL FFV2_6_0(W(1,1),W(1,2),W(1,11),R2_UUZ2CP,R2_UUZ2CM
     $     ,AMPL(1,37))
C         Counter-term amplitude(s) for loop diagram number 65
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAU,AMPL(1,38))
C         Counter-term amplitude(s) for loop diagram number 66
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZU,AMPL(1,39))
C         Counter-term amplitude(s) for loop diagram number 67
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZU,AMPL(1,40))
C         Counter-term amplitude(s) for loop diagram number 68
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZU,AMPL(1,41))
C         Counter-term amplitude(s) for loop diagram number 69
          CALL R2_GG_1_0(W(1,8),W(1,9),R2_WWUD1,AMPL(1,42))
C         Counter-term amplitude(s) for loop diagram number 70
          CALL R2_GG_1_R2_GG_3_0(W(1,6),W(1,10),R2_AAU,R2_AAT3,AMPL(1
     $     ,43))
C         Counter-term amplitude(s) for loop diagram number 71
          CALL R2_GG_1_R2_GG_3_0(W(1,6),W(1,11),R2_AZU,R2_AZT3,AMPL(1
     $     ,44))
C         Counter-term amplitude(s) for loop diagram number 72
          CALL R2_GG_1_R2_GG_3_0(W(1,10),W(1,7),R2_AZU,R2_AZT3,AMPL(1
     $     ,45))
C         Counter-term amplitude(s) for loop diagram number 73
          CALL R2_GG_1_R2_GG_3_0(W(1,7),W(1,11),R2_ZZU,R2_ZZT3,AMPL(1
     $     ,46))
C         Counter-term amplitude(s) for loop diagram number 74
          CALL R2_GG_1_R2_GG_3_0(W(1,8),W(1,9),R2_WWUD1,R2_WWTB3
     $     ,AMPL(1,47))
C         Counter-term amplitude(s) for loop diagram number 75
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAD,AMPL(1,48))
C         Counter-term amplitude(s) for loop diagram number 76
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZD,AMPL(1,49))
C         Counter-term amplitude(s) for loop diagram number 77
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZD,AMPL(1,50))
C         Counter-term amplitude(s) for loop diagram number 78
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZD,AMPL(1,51))
C         Counter-term amplitude(s) for loop diagram number 80
          CALL FFV2_6_0(W(1,4),W(1,3),W(1,6),R2_DDA2CP,R2_DDA2CM
     $     ,AMPL(1,52))
C         Counter-term amplitude(s) for loop diagram number 82
          CALL FFV2_6_0(W(1,4),W(1,3),W(1,7),R2_BBZ2CP,R2_SSZ2CM
     $     ,AMPL(1,53))
C         Counter-term amplitude(s) for loop diagram number 87
          CALL FFV2_0(W(1,1),W(1,2),W(1,10),R2_UUA2CP_D,AMPL(1,54))
C         Counter-term amplitude(s) for loop diagram number 88
          CALL FFV2_0(W(1,1),W(1,2),W(1,11),R2_CCZ2CP_S,AMPL(1,55))
C         Counter-term amplitude(s) for loop diagram number 93
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAD,AMPL(1,56))
C         Counter-term amplitude(s) for loop diagram number 94
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZD,AMPL(1,57))
C         Counter-term amplitude(s) for loop diagram number 95
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZD,AMPL(1,58))
C         Counter-term amplitude(s) for loop diagram number 96
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZD,AMPL(1,59))
C         Counter-term amplitude(s) for loop diagram number 97
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAD,AMPL(1,60))
C         Counter-term amplitude(s) for loop diagram number 98
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZD,AMPL(1,61))
C         Counter-term amplitude(s) for loop diagram number 99
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZD,AMPL(1,62))
C         Counter-term amplitude(s) for loop diagram number 100
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZD,AMPL(1,63))
C         Counter-term amplitude(s) for loop diagram number 101
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,9),W(1,8)
     $     ,C_UVWMWPMASS1EW,C_UVWMWPMASS2EW,C_UVWMWPMASS3EW,AMPL(1,64))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,9),W(1,8)
     $     ,C_UVWMWPMASS1EW_1EPS,C_UVWMWPMASS2EW_1EPS,C_UVWMWPMASS3EW_1
     $     EPS,AMPL(2,65))
C         Counter-term amplitude(s) for loop diagram number 107
          CALL R2_GG_1_R2_GG_2_R2_GG_3_0(W(1,6),W(1,10),R2_AABOSON1
     $     ,R2_AABOSON2,R2_AABOSON3,AMPL(1,66))
C         Counter-term amplitude(s) for loop diagram number 111
          CALL R2_GG_1_R2_GG_2_R2_GG_3_0(W(1,6),W(1,11),R2_AZBOSON1
     $     ,R2_AZC1,R2_AZBOSON3,AMPL(1,67))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,6),W(1,11)
     $     ,C_UVAZMASS1EW,C_UVAZMASS2EW,C_UVAZMASS3EW,AMPL(1,68))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,6),W(1,11)
     $     ,C_UVAZMASS1EW_1EPS,C_UVAZMASS2EW_1EPS,C_UVAZMASS3EW_1EPS
     $     ,AMPL(2,69))
C         Counter-term amplitude(s) for loop diagram number 115
          CALL R2_GG_1_R2_GG_2_R2_GG_3_0(W(1,10),W(1,7),R2_AZBOSON1
     $     ,R2_AZC1,R2_AZBOSON3,AMPL(1,70))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,10),W(1,7)
     $     ,C_UVAZMASS1EW,C_UVAZMASS2EW,C_UVAZMASS3EW,AMPL(1,71))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,10),W(1,7)
     $     ,C_UVAZMASS1EW_1EPS,C_UVAZMASS2EW_1EPS,C_UVAZMASS3EW_1EPS
     $     ,AMPL(2,72))
C         Counter-term amplitude(s) for loop diagram number 137
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZV,AMPL(1,73))
C         Counter-term amplitude(s) for loop diagram number 138
          CALL R2_GG_1_0(W(1,8),W(1,9),R2_WWL,AMPL(1,74))
C         Counter-term amplitude(s) for loop diagram number 139
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZV,AMPL(1,75))
C         Counter-term amplitude(s) for loop diagram number 140
          CALL R2_GG_1_0(W(1,8),W(1,9),R2_WWL,AMPL(1,76))
C         Counter-term amplitude(s) for loop diagram number 141
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZV,AMPL(1,77))
C         Counter-term amplitude(s) for loop diagram number 142
          CALL R2_GG_1_0(W(1,8),W(1,9),R2_WWL,AMPL(1,78))
C         Counter-term amplitude(s) for loop diagram number 143
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAL,AMPL(1,79))
          CALL L_WMWPMASS1_L_WMWPMASS3_0(W(1,6),W(1,10),C_UVAMASS1EW
     $     ,C_UVAMASS2EW,AMPL(1,80))
          CALL L_WMWPMASS1_L_WMWPMASS3_0(W(1,6),W(1,10),C_UVAMASS1EW_1E
     $     PS,C_UVAMASS2EW_1EPS,AMPL(2,81))
C         Counter-term amplitude(s) for loop diagram number 144
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZL,AMPL(1,82))
C         Counter-term amplitude(s) for loop diagram number 145
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZL,AMPL(1,83))
C         Counter-term amplitude(s) for loop diagram number 146
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZL,AMPL(1,84))
C         Counter-term amplitude(s) for loop diagram number 147
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAL,AMPL(1,85))
C         Counter-term amplitude(s) for loop diagram number 148
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZL,AMPL(1,86))
C         Counter-term amplitude(s) for loop diagram number 149
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZL,AMPL(1,87))
C         Counter-term amplitude(s) for loop diagram number 150
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZL,AMPL(1,88))
C         Counter-term amplitude(s) for loop diagram number 151
          CALL R2_GG_1_0(W(1,6),W(1,10),R2_AAL,AMPL(1,89))
C         Counter-term amplitude(s) for loop diagram number 152
          CALL R2_GG_1_0(W(1,6),W(1,11),R2_AZL,AMPL(1,90))
C         Counter-term amplitude(s) for loop diagram number 153
          CALL R2_GG_1_0(W(1,10),W(1,7),R2_AZL,AMPL(1,91))
C         Counter-term amplitude(s) for loop diagram number 154
          CALL R2_GG_1_0(W(1,7),W(1,11),R2_ZZL,AMPL(1,92))
C         Counter-term amplitude(s) for loop diagram number 155
          CALL R2_GG_1_R2_GG_2_R2_GG_3_0(W(1,7),W(1,11),R2_ZZBOSON1
     $     ,R2_ZZC1,R2_ZZBOSON3,AMPL(1,93))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,7),W(1,11)
     $     ,C_UVZMASS1EW,C_UVZMASS2EW,C_UVZMASS3EW,AMPL(1,94))
          CALL L_WMWPMASS1_L_WMWPMASS2_L_WMWPMASS3_0(W(1,7),W(1,11)
     $     ,C_UVZMASS1EW_1EPS,C_UVZMASS2EW_1EPS,C_UVZMASS3EW_1EPS
     $     ,AMPL(2,95))
C         Counter-term amplitude(s) for loop diagram number 157
          CALL R2_GG_1_R2_GG_2_R2_GG_3_0(W(1,8),W(1,9),R2_WWBOSON1
     $     ,R2_WWC1,R2_WWBOSON3,AMPL(1,96))
C         At this point, all CT amps needed for (QCD=2 QED=4), i.e. of
C          split order ID=1, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.2) GOTO 2000
C         At this point, all CT amps needed for (QCD=0 QED=6), i.e. of
C          split order ID=2, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.3) GOTO 2000
 2000     CONTINUE
          CT_REQ_SO_DONE=.TRUE.

C         Helas calls for the counterterm of type 'UVtree' in the UFO.
C         These are generated irrespectively of the produced loops.
C         In general, only wavefunction renormalization counterterms
C         (if needed by the loop UFO model) are of this type.
C         Quite often and in principle for all loop UFO models from 
C         FeynRules, there are none of these type of counterterms.

 3000     CONTINUE
          UVCT_REQ_SO_DONE=.TRUE.

          IF (.NOT.CHECKPHASE.AND.HELDOUBLECHECKED.AND.HELPICKED.EQ.
     $     -1) THEN
            DUMMY=GOODHEL(H)
          ELSE
            DUMMY=1
          ENDIF
          DO I=1,NCTAMPS
            DO J=1,NBORNAMPS
              CFTOT=DCMPLX(CF_N(I,J)/DBLE(ABS(CF_D(I,J))),0.0D0)
              IF(CF_D(I,J).LT.0) CFTOT=CFTOT*IMAG1
              ITEMP = ML5_0_ML5SQSOINDEX(ML5_0_ML5SOINDEX_FOR_LOOP_AMP(
     $         I),ML5_0_ML5SOINDEX_FOR_BORN_AMP(J))
              IF (.NOT.FILTER_SO.OR.SQSO_TARGET.EQ.ITEMP) THEN
                DO K=1,3
                  TEMP2 = 2.0D0*DUMMY*DBLE(CFTOT*AMPL(K,I)*DCONJG(AMP(J
     $             )))
                  ANS(K,ITEMP)=ANS(K,ITEMP)+TEMP2
                  ANS(K,0)=ANS(K,0)+TEMP2
                ENDDO
              ENDIF
            ENDDO
          ENDDO

C         Coefficient construction for loop diagram with ID 5
          CALL FFV1L1P0_3(PL(0,0),W(1,3),GC_11,ZERO,ZERO,PL(0,1),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1,1))
          CALL FFV1L3_2(PL(0,1),W(1,4),GC_11,ZERO,ZERO,PL(0,2),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,1),4,COEFS,4,4,WL(1,0,1,2))
          CALL FFV1L1_2(PL(0,2),W(1,6),GC_1,ZERO,ZERO,PL(0,3),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,2),4,COEFS,4,4,WL(1,0,1,3))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,3),2,4,1,1,97,H)
C         Coefficient construction for loop diagram with ID 6
          CALL FFV2_3L1_2(PL(0,2),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0,4)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,2),4,COEFS,4,4,WL(1,0,1,4))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,4),2,4,1,1,98,H)
C         Coefficient construction for loop diagram with ID 7
          CALL FFV1L1P0_3(PL(0,0),W(1,2),GC_11,ZERO,ZERO,PL(0,5),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1,5))
          CALL FFV1L3_2(PL(0,5),W(1,4),GC_11,ZERO,ZERO,PL(0,6),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,5),4,COEFS,4,4,WL(1,0,1,6))
          CALL FFV2L1_2(PL(0,6),W(1,8),GC_132,ZERO,ZERO,PL(0,7),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,6),4,COEFS,4,4,WL(1,0,1,7))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,7),2,4,2,1,99,H)
C         Coefficient construction for loop diagram with ID 8
          CALL FFV1L2P0_3(PL(0,0),W(1,1),GC_11,ZERO,ZERO,PL(0,8),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1,8))
          CALL FFV1L3_1(PL(0,8),W(1,3),GC_11,ZERO,ZERO,PL(0,9),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,8),4,COEFS,4,4,WL(1,0,1,9))
          CALL FFV2L2_1(PL(0,9),W(1,9),GC_132,ZERO,ZERO,PL(0,10),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,9),4,COEFS,4,4,WL(1,0,1
     $     ,10))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,10),2,4,3,1,100,H)
C         Coefficient construction for loop diagram with ID 9
          CALL FFV1L3_1(PL(0,8),W(1,2),GC_11,ZERO,ZERO,PL(0,11),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,8),4,COEFS,4,4,WL(1,0,1
     $     ,11))
          CALL FFV2L2_3(PL(0,11),W(1,4),GC_132,MDL_MW,ZERO,PL(0,12)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,11),4,COEFS,4,4,WL(1,0,1
     $     ,12))
          CALL FFV2L3_1(PL(0,12),W(1,3),GC_132,ZERO,ZERO,PL(0,13)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,12),4,COEFS,4,4,WL(1,0,1
     $     ,13))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,13),4,4,4,1,101,H)
C         Coefficient construction for loop diagram with ID 10
          CALL FFV1L2_1(PL(0,11),W(1,10),GC_2,ZERO,ZERO,PL(0,14),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,11),4,COEFS,4,4,WL(1,0,1
     $     ,14))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,14),2,4,5,1,102,H)
C         Coefficient construction for loop diagram with ID 11
          CALL FFV2_5L2_1(PL(0,11),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,15),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,11),4,COEFS,4,4,WL(1,0,1
     $     ,15))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,15),2,4,5,1,103,H)
C         Coefficient construction for loop diagram with ID 12
          CALL FFV1L3_2(PL(0,0),W(1,1),GC_11,ZERO,ZERO,PL(0,16),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,16))
          CALL FFV1L1P0_3(PL(0,16),W(1,2),GC_2,ZERO,ZERO,PL(0,17)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,16),4,COEFS,4,4,WL(1,0,1
     $     ,17))
          CALL FFV1L3_2(PL(0,17),W(1,4),GC_1,ZERO,ZERO,PL(0,18),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,17),4,COEFS,4,4,WL(1,0,1
     $     ,18))
          CALL FFV1L1P0_3(PL(0,18),W(1,3),GC_11,ZERO,ZERO,PL(0,19)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,18),4,COEFS,4,4,WL(1,0,1
     $     ,19))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,19),2,4,6,1,104,H)
C         Coefficient construction for loop diagram with ID 13
          CALL FFV2_5L1_3(PL(0,16),W(1,2),GC_69,GC_76,MDL_MZ,ZERO,PL(0
     $     ,20),COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,16),4,COEFS,4,4,WL(1,0,1
     $     ,20))
          CALL FFV2_3L3_2(PL(0,20),W(1,4),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,21),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,20),4,COEFS,4,4,WL(1,0,1
     $     ,21))
          CALL FFV1L1P0_3(PL(0,21),W(1,3),GC_11,ZERO,ZERO,PL(0,22)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,21),4,COEFS,4,4,WL(1,0,1
     $     ,22))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,22),4,4,7,1,105,H)
C         Coefficient construction for loop diagram with ID 14
          CALL FFV1L3_1(PL(0,17),W(1,3),GC_1,ZERO,ZERO,PL(0,23),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,17),4,COEFS,4,4,WL(1,0,1
     $     ,23))
          CALL FFV1L2P0_3(PL(0,23),W(1,4),GC_11,ZERO,ZERO,PL(0,24)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,23),4,COEFS,4,4,WL(1,0,1
     $     ,24))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,24),2,4,8,1,106,H)
C         Coefficient construction for loop diagram with ID 15
          CALL FFV2_3L3_1(PL(0,20),W(1,3),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,25),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,20),4,COEFS,4,4,WL(1,0,1
     $     ,25))
          CALL FFV1L2P0_3(PL(0,25),W(1,4),GC_11,ZERO,ZERO,PL(0,26)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,25),4,COEFS,4,4,WL(1,0,1
     $     ,26))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,26),4,4,9,1,107,H)
C         Coefficient construction for loop diagram with ID 16
          CALL FFV2L1_3(PL(0,16),W(1,3),GC_132,MDL_MW,ZERO,PL(0,27)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,16),4,COEFS,4,4,WL(1,0,1
     $     ,27))
          CALL FFV2L3_1(PL(0,27),W(1,2),GC_132,ZERO,ZERO,PL(0,28)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,27),4,COEFS,4,4,WL(1,0,1
     $     ,28))
          CALL FFV1L2P0_3(PL(0,28),W(1,4),GC_11,ZERO,ZERO,PL(0,29)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,28),4,COEFS,4,4,WL(1,0,1
     $     ,29))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,29),4,4,10,1,108,H)
C         Coefficient construction for loop diagram with ID 17
          CALL FFV1L3_2(PL(0,0),W(1,1),GC_2,ZERO,ZERO,PL(0,30),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,30))
          CALL FFV1L1P0_3(PL(0,30),W(1,2),GC_11,ZERO,ZERO,PL(0,31)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,30),4,COEFS,4,4,WL(1,0,1
     $     ,31))
          CALL FFV1L3_1(PL(0,31),W(1,3),GC_11,ZERO,ZERO,PL(0,32),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,31),4,COEFS,4,4,WL(1,0,1
     $     ,32))
          CALL FFV1L2P0_3(PL(0,32),W(1,4),GC_1,ZERO,ZERO,PL(0,33)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,32),4,COEFS,4,4,WL(1,0,1
     $     ,33))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,33),2,4,8,1,109,H)
C         Coefficient construction for loop diagram with ID 18
          CALL FFV2_5L3_2(PL(0,0),W(1,1),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,34),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,34))
          CALL FFV1L1P0_3(PL(0,34),W(1,2),GC_11,ZERO,ZERO,PL(0,35)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,34),4,COEFS,4,4,WL(1,0,1
     $     ,35))
          CALL FFV1L3_1(PL(0,35),W(1,3),GC_11,ZERO,ZERO,PL(0,36),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,35),4,COEFS,4,4,WL(1,0,1
     $     ,36))
          CALL FFV2_3L2_3(PL(0,36),W(1,4),GC_68,GC_76,MDL_MZ,ZERO,PL(0
     $     ,37),COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,36),4,COEFS,4,4,WL(1,0,1
     $     ,37))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,37),4,4,11,1,110,H)
C         Coefficient construction for loop diagram with ID 19
          CALL FFV2L3_2(PL(0,0),W(1,1),GC_132,ZERO,ZERO,PL(0,38),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,38))
          CALL FFV1L1P0_3(PL(0,38),W(1,3),GC_11,ZERO,ZERO,PL(0,39)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,38),4,COEFS,4,4,WL(1,0,1
     $     ,39))
          CALL FFV1L3_1(PL(0,39),W(1,2),GC_11,ZERO,ZERO,PL(0,40),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,39),4,COEFS,4,4,WL(1,0,1
     $     ,40))
          CALL FFV2L2_3(PL(0,40),W(1,4),GC_132,MDL_MW,ZERO,PL(0,41)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,40),4,COEFS,4,4,WL(1,0,1
     $     ,41))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,41),4,4,12,1,111,H)
C         Coefficient construction for loop diagram with ID 20
          CALL FFV1L3_2(PL(0,31),W(1,4),GC_11,ZERO,ZERO,PL(0,42),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,31),4,COEFS,4,4,WL(1,0,1
     $     ,42))
          CALL FFV1L1P0_3(PL(0,42),W(1,3),GC_1,ZERO,ZERO,PL(0,43)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,42),4,COEFS,4,4,WL(1,0,1
     $     ,43))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,43),2,4,6,1,112,H)
C         Coefficient construction for loop diagram with ID 21
          CALL FFV1L3_2(PL(0,35),W(1,4),GC_11,ZERO,ZERO,PL(0,44),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,35),4,COEFS,4,4,WL(1,0,1
     $     ,44))
          CALL FFV2_3L1_3(PL(0,44),W(1,3),GC_68,GC_76,MDL_MZ,ZERO,PL(0
     $     ,45),COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,44),4,COEFS,4,4,WL(1,0,1
     $     ,45))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,45),4,4,13,1,113,H)
C         Coefficient construction for loop diagram with ID 22
          CALL FFV2L2_3(PL(0,0),W(1,1),GC_132,MDL_MW,ZERO,PL(0,46)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,46))
          CALL FFV2L3_1(PL(0,46),W(1,2),GC_132,ZERO,ZERO,PL(0,47)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,46),4,COEFS,4,4,WL(1,0,1
     $     ,47))
          CALL FFV1L2P0_3(PL(0,47),W(1,4),GC_11,ZERO,ZERO,PL(0,48)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_0(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,48))
          CALL FFV1L3_1(PL(0,48),W(1,3),GC_11,ZERO,ZERO,PL(0,49),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,48),4,COEFS,4,4,WL(1,0,1
     $     ,49))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,49),4,4,14,1,114,H)
C         Coefficient construction for loop diagram with ID 23
          CALL FFV2L1_3(PL(0,0),W(1,3),GC_132,MDL_MW,ZERO,PL(0,50)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,50))
          CALL FFV2L3_2(PL(0,50),W(1,4),GC_132,ZERO,ZERO,PL(0,51)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,50),4,COEFS,4,4,WL(1,0,1
     $     ,51))
          CALL FFV1L1_2(PL(0,51),W(1,5),GC_11,ZERO,ZERO,PL(0,52),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,51),4,COEFS,4,4,WL(1,0,1
     $     ,52))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,52),4,4,15,1,115,H)
C         Coefficient construction for loop diagram with ID 24
          CALL FFV1L2P0_3(PL(0,0),W(1,1),GC_2,ZERO,ZERO,PL(0,53),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,53))
          CALL FFV1L3_1(PL(0,53),W(1,2),GC_2,ZERO,ZERO,PL(0,54),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,53),4,COEFS,4,4,WL(1,0,1
     $     ,54))
          CALL FFV1L2_1(PL(0,54),W(1,12),GC_11,ZERO,ZERO,PL(0,55)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,54),4,COEFS,4,4,WL(1,0,1
     $     ,55))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,55),2,4,5,1,116,H)
C         Coefficient construction for loop diagram with ID 25
          CALL FFV2_5L2_3(PL(0,0),W(1,1),GC_69,GC_76,MDL_MZ,ZERO,PL(0
     $     ,56),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,56))
          CALL FFV2_5L3_1(PL(0,56),W(1,2),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,57),COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,56),4,COEFS,4,4,WL(1,0,1
     $     ,57))
          CALL FFV1L2_1(PL(0,57),W(1,12),GC_11,ZERO,ZERO,PL(0,58)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,57),4,COEFS,4,4,WL(1,0,1
     $     ,58))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,58),4,4,16,1,117,H)
C         Coefficient construction for loop diagram with ID 26
          CALL FFV1L1P0_3(PL(0,0),W(1,3),GC_1,ZERO,ZERO,PL(0,59),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,59))
          CALL FFV1L3_2(PL(0,59),W(1,4),GC_1,ZERO,ZERO,PL(0,60),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,59),4,COEFS,4,4,WL(1,0,1
     $     ,60))
          CALL FFV1L1_2(PL(0,60),W(1,5),GC_11,ZERO,ZERO,PL(0,61),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,60),4,COEFS,4,4,WL(1,0,1
     $     ,61))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,61),2,4,1,1,118,H)
C         Coefficient construction for loop diagram with ID 27
          CALL FFV2_3L1_3(PL(0,0),W(1,3),GC_68,GC_76,MDL_MZ,ZERO,PL(0
     $     ,62),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,62))
          CALL FFV2_3L3_2(PL(0,62),W(1,4),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,63),COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,62),4,COEFS,4,4,WL(1,0,1
     $     ,63))
          CALL FFV1L1_2(PL(0,63),W(1,5),GC_11,ZERO,ZERO,PL(0,64),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,63),4,COEFS,4,4,WL(1,0,1
     $     ,64))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,64),4,4,17,1,119,H)
C         Coefficient construction for loop diagram with ID 28
          CALL FFV1L2_1(PL(0,47),W(1,12),GC_11,ZERO,ZERO,PL(0,65)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,65))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,65),4,4,18,1,120,H)
C         At this point, all loop coefficients needed for (QCD=4
C          QED=2), i.e. of split order ID=0, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.1) GOTO 4000
C         Coefficient construction for loop diagram with ID 29
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_2,ZERO,ZERO,PL(0,66),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,66))
          CALL FFV1L2_1(PL(0,66),W(1,10),GC_2,ZERO,ZERO,PL(0,67),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,66),4,COEFS,4,4,WL(1,0,1
     $     ,67))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,67),2,4,19,1,121,H)
C         Coefficient construction for loop diagram with ID 30
          CALL FFV2_5L2_1(PL(0,66),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,68),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,66),4,COEFS,4,4,WL(1,0,1
     $     ,68))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,68),2,4,19,1,122,H)
C         Coefficient construction for loop diagram with ID 31
          CALL FFV2_5L2_1(PL(0,0),W(1,7),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,69),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,69))
          CALL FFV1L2_1(PL(0,69),W(1,10),GC_2,ZERO,ZERO,PL(0,70),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,69),4,COEFS,4,4,WL(1,0,1
     $     ,70))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,70),2,4,19,1,123,H)
C         Coefficient construction for loop diagram with ID 32
          CALL FFV2_5L2_1(PL(0,69),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,71),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,69),4,COEFS,4,4,WL(1,0,1
     $     ,71))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,71),2,4,19,1,124,H)
C         Coefficient construction for loop diagram with ID 33
          CALL FFV1L1_2(PL(0,51),W(1,6),GC_2,ZERO,ZERO,PL(0,72),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,51),4,COEFS,4,4,WL(1,0,1
     $     ,72))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,72),4,4,15,1,125,H)
C         Coefficient construction for loop diagram with ID 34
          CALL FFV2_5L1_2(PL(0,51),W(1,7),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,73),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,51),4,COEFS,4,4,WL(1,0,1
     $     ,73))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,73),4,4,15,1,126,H)
C         Coefficient construction for loop diagram with ID 35
          CALL FFV2L3_1(PL(0,0),W(1,3),GC_132,ZERO,ZERO,PL(0,74),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,74))
          CALL FFV2L2_3(PL(0,74),W(1,4),GC_132,MDL_MW,ZERO,PL(0,75)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,74),4,COEFS,4,4,WL(1,0,1
     $     ,75))
          CALL VVV1L3_2(PL(0,75),W(1,6),GC_4,MDL_MW,ZERO,PL(0,76)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,75),4,COEFS,4,4,WL(1,0,1
     $     ,76))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,76),5,4,20,1,127,H)
C         Coefficient construction for loop diagram with ID 36
          CALL VVV1L2_1(PL(0,75),W(1,7),GC_71,MDL_MW,ZERO,PL(0,77)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,75),4,COEFS,4,4,WL(1,0,1
     $     ,77))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,77),5,4,20,1,128,H)
C         Coefficient construction for loop diagram with ID 37
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,ZERO,ZERO,PL(0,78),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,78))
          CALL FFV2L1_2(PL(0,78),W(1,9),GC_132,ZERO,ZERO,PL(0,79)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,78),4,COEFS,4,4,WL(1,0,1
     $     ,79))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,79),2,4,21,1,129,H)
C         Coefficient construction for loop diagram with ID 38
          CALL FFV1L1P0_3(PL(0,0),W(1,2),GC_2,ZERO,ZERO,PL(0,80),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,80))
          CALL FFV1L3_2(PL(0,80),W(1,4),GC_1,ZERO,ZERO,PL(0,81),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,80),4,COEFS,4,4,WL(1,0,1
     $     ,81))
          CALL FFV2L1_2(PL(0,81),W(1,8),GC_132,ZERO,ZERO,PL(0,82)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,81),4,COEFS,4,4,WL(1,0,1
     $     ,82))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,82),2,4,2,1,130,H)
C         Coefficient construction for loop diagram with ID 39
          CALL FFV2_5L1_3(PL(0,0),W(1,2),GC_69,GC_76,MDL_MZ,ZERO,PL(0
     $     ,83),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,83))
          CALL FFV2_3L3_2(PL(0,83),W(1,4),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,84),COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,83),4,COEFS,4,4,WL(1,0,1
     $     ,84))
          CALL FFV2L1_2(PL(0,84),W(1,8),GC_132,ZERO,ZERO,PL(0,85)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,84),4,COEFS,4,4,WL(1,0,1
     $     ,85))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,85),4,4,22,1,131,H)
C         Coefficient construction for loop diagram with ID 40
          CALL FFV1L3_1(PL(0,0),W(1,2),GC_2,ZERO,ZERO,PL(0,86),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,86))
          CALL FFV2L2_3(PL(0,86),W(1,4),GC_132,MDL_MW,ZERO,PL(0,87)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,86),4,COEFS,4,4,WL(1,0,1
     $     ,87))
          CALL VVV1L3P0_1(PL(0,87),W(1,8),GC_4,ZERO,ZERO,PL(0,88)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,87),4,COEFS,4,4,WL(1,0,1
     $     ,88))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,88),4,4,23,1,132,H)
C         Coefficient construction for loop diagram with ID 41
          CALL FFV2_5L3_1(PL(0,0),W(1,2),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,89),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,89))
          CALL FFV2L2_3(PL(0,89),W(1,4),GC_132,MDL_MW,ZERO,PL(0,90)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,89),4,COEFS,4,4,WL(1,0,1
     $     ,90))
          CALL VVV1L2_3(PL(0,90),W(1,8),GC_71,MDL_MZ,ZERO,PL(0,91)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,90),4,COEFS,4,4,WL(1,0,1
     $     ,91))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,91),5,4,24,1,133,H)
C         Coefficient construction for loop diagram with ID 42
          CALL FFV1L3_1(PL(0,53),W(1,3),GC_1,ZERO,ZERO,PL(0,92),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,53),4,COEFS,4,4,WL(1,0,1
     $     ,92))
          CALL FFV2L2_1(PL(0,92),W(1,9),GC_132,ZERO,ZERO,PL(0,93)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,92),4,COEFS,4,4,WL(1,0,1
     $     ,93))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,93),2,4,3,1,134,H)
C         Coefficient construction for loop diagram with ID 43
          CALL FFV2_3L3_1(PL(0,56),W(1,3),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,94),COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,56),4,COEFS,4,4,WL(1,0,1
     $     ,94))
          CALL FFV2L2_1(PL(0,94),W(1,9),GC_132,ZERO,ZERO,PL(0,95)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,94),4,COEFS,4,4,WL(1,0,1
     $     ,95))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,95),4,4,25,1,135,H)
C         Coefficient construction for loop diagram with ID 44
          CALL FFV2L1_3(PL(0,30),W(1,3),GC_132,MDL_MW,ZERO,PL(0,96)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,30),4,COEFS,4,4,WL(1,0,1
     $     ,96))
          CALL VVV1L2P0_1(PL(0,96),W(1,9),GC_4,ZERO,ZERO,PL(0,97)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,96),4,COEFS,4,4,WL(1,0,1
     $     ,97))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,97),4,4,26,1,136,H)
C         Coefficient construction for loop diagram with ID 45
          CALL FFV2L1_3(PL(0,34),W(1,3),GC_132,MDL_MW,ZERO,PL(0,98)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,34),4,COEFS,4,4,WL(1,0,1
     $     ,98))
          CALL VVV1L1_3(PL(0,98),W(1,9),GC_71,MDL_MZ,ZERO,PL(0,99)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,98),4,COEFS,4,4,WL(1,0,1
     $     ,99))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,99),5,4,27,1,137,H)
C         Coefficient construction for loop diagram with ID 46
          CALL FFV1L1P0_3(PL(0,30),W(1,2),GC_2,ZERO,ZERO,PL(0,100)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,30),4,COEFS,4,4,WL(1,0,1
     $     ,100))
          CALL FFV1L3_2(PL(0,100),W(1,4),GC_1,ZERO,ZERO,PL(0,101)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,100),4,COEFS,4,4,WL(1,0,1
     $     ,101))
          CALL FFV1L1P0_3(PL(0,101),W(1,3),GC_1,ZERO,ZERO,PL(0,102)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,101),4,COEFS,4,4,WL(1,0,1
     $     ,102))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,102),2,4,6,1,138,H)
C         Coefficient construction for loop diagram with ID 47
          CALL FFV1L3_1(PL(0,100),W(1,3),GC_1,ZERO,ZERO,PL(0,103)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,100),4,COEFS,4,4,WL(1,0,1
     $     ,103))
          CALL FFV1L2P0_3(PL(0,103),W(1,4),GC_1,ZERO,ZERO,PL(0,104)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_0(WL(1,0,1,103),4,COEFS,4,4,WL(1,0,1
     $     ,104))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,104),2,4,8,1,139,H)
C         Coefficient construction for loop diagram with ID 48
          CALL FFV2_5L1_3(PL(0,30),W(1,2),GC_69,GC_76,MDL_MZ,ZERO,PL(0
     $     ,105),COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,30),4,COEFS,4,4,WL(1,0,1
     $     ,105))
          CALL FFV2_3L3_2(PL(0,105),W(1,4),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,106),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,105),4,COEFS,4,4,WL(1,0,1
     $     ,106))
          CALL FFV1L1P0_3(PL(0,106),W(1,3),GC_1,ZERO,ZERO,PL(0,107)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,106),4,COEFS,4,4,WL(1,0,1
     $     ,107))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,107),4,4,7,1,140,H)
C         Coefficient construction for loop diagram with ID 49
          CALL FFV2_3L3_1(PL(0,105),W(1,3),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,108),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,105),4,COEFS,4,4,WL(1,0,1
     $     ,108))
          CALL FFV1L2P0_3(PL(0,108),W(1,4),GC_1,ZERO,ZERO,PL(0,109)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,108),4,COEFS,4,4,WL(1,0,1
     $     ,109))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,109),4,4,9,1,141,H)
C         Coefficient construction for loop diagram with ID 50
          CALL FFV1L1P0_3(PL(0,34),W(1,2),GC_2,ZERO,ZERO,PL(0,110)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,34),4,COEFS,4,4,WL(1,0,1
     $     ,110))
          CALL FFV1L3_2(PL(0,110),W(1,4),GC_1,ZERO,ZERO,PL(0,111)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,110),4,COEFS,4,4,WL(1,0,1
     $     ,111))
          CALL FFV2_3L1_3(PL(0,111),W(1,3),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,112),COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,111),4,COEFS,4,4,WL(1,0,1
     $     ,112))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,112),4,4,13,1,142,H)
C         Coefficient construction for loop diagram with ID 51
          CALL FFV1L3_1(PL(0,110),W(1,3),GC_1,ZERO,ZERO,PL(0,113)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,110),4,COEFS,4,4,WL(1,0,1
     $     ,113))
          CALL FFV2_3L2_3(PL(0,113),W(1,4),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,114),COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,113),4,COEFS,4,4,WL(1,0,1
     $     ,114))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,114),4,4,11,1,143,H)
C         Coefficient construction for loop diagram with ID 52
          CALL FFV2_5L1_3(PL(0,34),W(1,2),GC_69,GC_76,MDL_MZ,ZERO,PL(0
     $     ,115),COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,34),4,COEFS,4,4,WL(1,0,1
     $     ,115))
          CALL FFV2_3L3_2(PL(0,115),W(1,4),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,116),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,115),4,COEFS,4,4,WL(1,0,1
     $     ,116))
          CALL FFV2_3L1_3(PL(0,116),W(1,3),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,117),COEFS)
          CALL ML5_0_UPDATE_WL_4_2(WL(1,0,1,116),4,COEFS,4,4,WL(1,0,1
     $     ,117))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,117),6,4,28,1,144,H)
C         Coefficient construction for loop diagram with ID 53
          CALL FFV2_3L3_1(PL(0,115),W(1,3),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,118),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,115),4,COEFS,4,4,WL(1,0,1
     $     ,118))
          CALL FFV2_3L2_3(PL(0,118),W(1,4),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,119),COEFS)
          CALL ML5_0_UPDATE_WL_4_2(WL(1,0,1,118),4,COEFS,4,4,WL(1,0,1
     $     ,119))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,119),6,4,29,1,145,H)
C         Coefficient construction for loop diagram with ID 54
          CALL FFV1L2_1(PL(0,54),W(1,10),GC_2,ZERO,ZERO,PL(0,120)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,54),4,COEFS,4,4,WL(1,0,1
     $     ,120))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,120),2,4,5,1,146,H)
C         Coefficient construction for loop diagram with ID 55
          CALL FFV2_5L2_1(PL(0,54),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,121),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,54),4,COEFS,4,4,WL(1,0,1
     $     ,121))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,121),2,4,5,1,147,H)
C         Coefficient construction for loop diagram with ID 56
          CALL FFV1L2_1(PL(0,57),W(1,10),GC_2,ZERO,ZERO,PL(0,122)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,57),4,COEFS,4,4,WL(1,0,1
     $     ,122))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,122),4,4,16,1,148,H)
C         Coefficient construction for loop diagram with ID 57
          CALL FFV2_5L2_1(PL(0,57),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,123),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,57),4,COEFS,4,4,WL(1,0,1
     $     ,123))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,123),4,4,16,1,149,H)
C         Coefficient construction for loop diagram with ID 58
          CALL FFV2L2_3(PL(0,54),W(1,4),GC_132,MDL_MW,ZERO,PL(0,124)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,54),4,COEFS,4,4,WL(1,0,1
     $     ,124))
          CALL FFV2L3_1(PL(0,124),W(1,3),GC_132,ZERO,ZERO,PL(0,125)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,124),4,COEFS,4,4,WL(1,0,1
     $     ,125))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,125),4,4,4,1,150,H)
C         Coefficient construction for loop diagram with ID 59
          CALL FFV2L3_1(PL(0,96),W(1,2),GC_132,ZERO,ZERO,PL(0,126)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,96),4,COEFS,4,4,WL(1,0,1
     $     ,126))
          CALL FFV1L2P0_3(PL(0,126),W(1,4),GC_1,ZERO,ZERO,PL(0,127)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_0(WL(1,0,1,126),4,COEFS,4,4,WL(1,0,1
     $     ,127))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,127),4,4,10,1,151,H)
C         Coefficient construction for loop diagram with ID 60
          CALL FFV2L2_3(PL(0,57),W(1,4),GC_132,MDL_MW,ZERO,PL(0,128)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,57),4,COEFS,4,4,WL(1,0,1
     $     ,128))
          CALL FFV2L3_1(PL(0,128),W(1,3),GC_132,ZERO,ZERO,PL(0,129)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_5_1(WL(1,0,1,128),4,COEFS,4,4,WL(1,0,1
     $     ,129))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,129),6,4,30,1,152,H)
C         Coefficient construction for loop diagram with ID 61
          CALL FFV2L3_1(PL(0,98),W(1,2),GC_132,ZERO,ZERO,PL(0,130)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,98),4,COEFS,4,4,WL(1,0,1
     $     ,130))
          CALL FFV2_3L2_3(PL(0,130),W(1,4),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,131),COEFS)
          CALL ML5_0_UPDATE_WL_4_2(WL(1,0,1,130),4,COEFS,4,4,WL(1,0,1
     $     ,131))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,131),6,4,31,1,153,H)
C         Coefficient construction for loop diagram with ID 62
          CALL FFV1L1P0_3(PL(0,38),W(1,3),GC_1,ZERO,ZERO,PL(0,132)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,38),4,COEFS,4,4,WL(1,0,1
     $     ,132))
          CALL FFV1L3_1(PL(0,132),W(1,2),GC_2,ZERO,ZERO,PL(0,133)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,132),4,COEFS,4,4,WL(1,0,1
     $     ,133))
          CALL FFV2L2_3(PL(0,133),W(1,4),GC_132,MDL_MW,ZERO,PL(0,134)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,133),4,COEFS,4,4,WL(1,0,1
     $     ,134))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,134),4,4,12,1,154,H)
C         Coefficient construction for loop diagram with ID 63
          CALL FFV2_3L1_3(PL(0,38),W(1,3),GC_68,GC_76,MDL_MZ,ZERO,PL(0
     $     ,135),COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,38),4,COEFS,4,4,WL(1,0,1
     $     ,135))
          CALL FFV2_5L3_1(PL(0,135),W(1,2),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,136),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,135),4,COEFS,4,4,WL(1,0,1
     $     ,136))
          CALL FFV2L2_3(PL(0,136),W(1,4),GC_132,MDL_MW,ZERO,PL(0,137)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_2(WL(1,0,1,136),4,COEFS,4,4,WL(1,0,1
     $     ,137))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,137),6,4,32,1,155,H)
C         Coefficient construction for loop diagram with ID 64
          CALL FFV2L1_3(PL(0,38),W(1,2),GC_132,MDL_MW,ZERO,PL(0,138)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,38),4,COEFS,4,4,WL(1,0,1
     $     ,138))
          CALL FFV2L3_1(PL(0,138),W(1,3),GC_132,ZERO,ZERO,PL(0,139)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,138),4,COEFS,4,4,WL(1,0,1
     $     ,139))
          CALL FFV2L2_3(PL(0,139),W(1,4),GC_132,MDL_MW,ZERO,PL(0,140)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_4_2(WL(1,0,1,139),4,COEFS,4,4,WL(1,0,1
     $     ,140))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,140),6,4,33,1,156,H)
C         Coefficient construction for loop diagram with ID 65
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_2,ZERO,ZERO,PL(0,141),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,141))
          CALL FFV1L2_1(PL(0,141),W(1,10),GC_2,ZERO,ZERO,PL(0,142)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,141),4,COEFS,4,4,WL(1,0,1
     $     ,142))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,142),2,4,19,1,157,H)
C         Coefficient construction for loop diagram with ID 66
          CALL FFV2_5L2_1(PL(0,141),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,143),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,141),4,COEFS,4,4,WL(1,0,1
     $     ,143))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,143),2,4,19,1,158,H)
C         Coefficient construction for loop diagram with ID 67
          CALL FFV2_5L2_1(PL(0,0),W(1,7),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,144),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,144))
          CALL FFV1L2_1(PL(0,144),W(1,10),GC_2,ZERO,ZERO,PL(0,145)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,144),4,COEFS,4,4,WL(1,0,1
     $     ,145))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,145),2,4,19,1,159,H)
C         Coefficient construction for loop diagram with ID 68
          CALL FFV2_5L2_1(PL(0,144),W(1,11),GC_69,GC_76,ZERO,ZERO,PL(0
     $     ,146),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,144),4,COEFS,4,4,WL(1,0,1
     $     ,146))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,146),2,4,19,1,160,H)
C         Coefficient construction for loop diagram with ID 69
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,ZERO,ZERO,PL(0,147)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,147))
          CALL FFV2L1_2(PL(0,147),W(1,9),GC_132,ZERO,ZERO,PL(0,148)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,147),4,COEFS,4,4,WL(1,0,1
     $     ,148))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,148),2,4,21,1,161,H)
C         Coefficient construction for loop diagram with ID 70
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_2,MDL_MT,ZERO,PL(0,149)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,149))
          CALL FFV1L2_1(PL(0,149),W(1,10),GC_2,MDL_MT,ZERO,PL(0,150)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,149),4,COEFS,4,4,WL(1,0,1
     $     ,150))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,150),2,4,34,1,162,H)
C         Coefficient construction for loop diagram with ID 71
          CALL FFV2_5L2_1(PL(0,149),W(1,11),GC_69,GC_76,MDL_MT,ZERO
     $     ,PL(0,151),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,149),4,COEFS,4,4,WL(1,0,1
     $     ,151))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,151),2,4,34,1,163,H)
C         Coefficient construction for loop diagram with ID 72
          CALL FFV2_5L2_1(PL(0,0),W(1,7),GC_69,GC_76,MDL_MT,ZERO,PL(0
     $     ,152),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,152))
          CALL FFV1L2_1(PL(0,152),W(1,10),GC_2,MDL_MT,ZERO,PL(0,153)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,152),4,COEFS,4,4,WL(1,0,1
     $     ,153))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,153),2,4,34,1,164,H)
C         Coefficient construction for loop diagram with ID 73
          CALL FFV2_5L2_1(PL(0,152),W(1,11),GC_69,GC_76,MDL_MT,ZERO
     $     ,PL(0,154),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,152),4,COEFS,4,4,WL(1,0,1
     $     ,154))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,154),2,4,34,1,165,H)
C         Coefficient construction for loop diagram with ID 74
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,MDL_MT,ZERO,PL(0,155)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,155))
          CALL FFV2L1_2(PL(0,155),W(1,9),GC_132,ZERO,ZERO,PL(0,156)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,155),4,COEFS,4,4,WL(1,0,1
     $     ,156))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,156),2,4,35,1,166,H)
C         Coefficient construction for loop diagram with ID 75
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_1,ZERO,ZERO,PL(0,157),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,157))
          CALL FFV1L2_1(PL(0,157),W(1,10),GC_1,ZERO,ZERO,PL(0,158)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,157),4,COEFS,4,4,WL(1,0,1
     $     ,158))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,158),2,4,19,1,167,H)
C         Coefficient construction for loop diagram with ID 76
          CALL FFV2_3L2_1(PL(0,157),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,159),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,157),4,COEFS,4,4,WL(1,0,1
     $     ,159))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,159),2,4,19,1,168,H)
C         Coefficient construction for loop diagram with ID 77
          CALL FFV2_3L2_1(PL(0,0),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,160),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,160))
          CALL FFV1L2_1(PL(0,160),W(1,10),GC_1,ZERO,ZERO,PL(0,161)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,160),4,COEFS,4,4,WL(1,0,1
     $     ,161))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,161),2,4,19,1,169,H)
C         Coefficient construction for loop diagram with ID 78
          CALL FFV2_3L2_1(PL(0,160),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,162),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,160),4,COEFS,4,4,WL(1,0,1
     $     ,162))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,162),2,4,19,1,170,H)
C         Coefficient construction for loop diagram with ID 79
          CALL FFV1L1_2(PL(0,60),W(1,6),GC_1,ZERO,ZERO,PL(0,163),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,60),4,COEFS,4,4,WL(1,0,1
     $     ,163))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,163),2,4,1,1,171,H)
C         Coefficient construction for loop diagram with ID 80
          CALL FFV1L1_2(PL(0,63),W(1,6),GC_1,ZERO,ZERO,PL(0,164),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,63),4,COEFS,4,4,WL(1,0,1
     $     ,164))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,164),4,4,17,1,172,H)
C         Coefficient construction for loop diagram with ID 81
          CALL FFV2_3L1_2(PL(0,60),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,165),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,60),4,COEFS,4,4,WL(1,0,1
     $     ,165))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,165),2,4,1,1,173,H)
C         Coefficient construction for loop diagram with ID 82
          CALL FFV2_3L1_2(PL(0,63),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,166),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,63),4,COEFS,4,4,WL(1,0,1
     $     ,166))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,166),4,4,17,1,174,H)
C         Coefficient construction for loop diagram with ID 83
          CALL FFV2L3_1(PL(0,0),W(1,2),GC_132,ZERO,ZERO,PL(0,167)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,167))
          CALL FFV1L2P0_3(PL(0,167),W(1,4),GC_1,ZERO,ZERO,PL(0,168)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_0(WL(1,0,1,167),4,COEFS,4,4,WL(1,0,1
     $     ,168))
          CALL VVV1L1_3(PL(0,168),W(1,8),GC_4,MDL_MW,ZERO,PL(0,169)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,168),4,COEFS,4,4,WL(1,0,1
     $     ,169))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,169),3,4,36,1,175,H)
C         Coefficient construction for loop diagram with ID 84
          CALL FFV2_3L2_3(PL(0,167),W(1,4),GC_68,GC_76,MDL_MZ,ZERO
     $     ,PL(0,170),COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,167),4,COEFS,4,4,WL(1,0,1
     $     ,170))
          CALL VVV1L3_2(PL(0,170),W(1,8),GC_71,MDL_MW,ZERO,PL(0,171)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,170),4,COEFS,4,4,WL(1,0,1
     $     ,171))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,171),5,4,37,1,176,H)
C         Coefficient construction for loop diagram with ID 85
          CALL VVV1L1_2(PL(0,132),W(1,9),GC_4,MDL_MW,ZERO,PL(0,172)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_2(WL(1,0,1,132),4,COEFS,4,4,WL(1,0,1
     $     ,172))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,172),3,4,38,1,177,H)
C         Coefficient construction for loop diagram with ID 86
          CALL VVV1L3_1(PL(0,135),W(1,9),GC_71,MDL_MW,ZERO,PL(0,173)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,135),4,COEFS,4,4,WL(1,0,1
     $     ,173))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,173),5,4,39,1,178,H)
C         Coefficient construction for loop diagram with ID 87
          CALL VVV1L3_2(PL(0,138),W(1,10),GC_4,MDL_MW,ZERO,PL(0,174)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,138),4,COEFS,4,4,WL(1,0,1
     $     ,174))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,174),5,4,40,1,179,H)
C         Coefficient construction for loop diagram with ID 88
          CALL VVV1L2_1(PL(0,138),W(1,11),GC_71,MDL_MW,ZERO,PL(0,175)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,138),4,COEFS,4,4,WL(1,0,1
     $     ,175))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,175),5,4,40,1,180,H)
C         Coefficient construction for loop diagram with ID 89
          CALL FFV1L2_1(PL(0,47),W(1,10),GC_1,ZERO,ZERO,PL(0,176)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,176))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,176),4,4,18,1,181,H)
C         Coefficient construction for loop diagram with ID 90
          CALL FFV2_3L2_1(PL(0,47),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,177),COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,177))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,177),4,4,18,1,182,H)
C         Coefficient construction for loop diagram with ID 91
          CALL FFV1L2P0_3(PL(0,47),W(1,4),GC_1,ZERO,ZERO,PL(0,178)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_0(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,178))
          CALL FFV1L3_1(PL(0,178),W(1,3),GC_1,ZERO,ZERO,PL(0,179)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_3_1(WL(1,0,1,178),4,COEFS,4,4,WL(1,0,1
     $     ,179))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,179),4,4,14,1,183,H)
C         Coefficient construction for loop diagram with ID 92
          CALL FFV2_3L2_3(PL(0,47),W(1,4),GC_68,GC_76,MDL_MZ,ZERO,PL(0
     $     ,180),COEFS)
          CALL ML5_0_UPDATE_WL_3_2(WL(1,0,1,47),4,COEFS,4,4,WL(1,0,1
     $     ,180))
          CALL FFV2_3L3_1(PL(0,180),W(1,3),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,181),COEFS)
          CALL ML5_0_UPDATE_WL_5_1(WL(1,0,1,180),4,COEFS,4,4,WL(1,0,1
     $     ,181))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,181),6,4,41,1,184,H)
C         Coefficient construction for loop diagram with ID 93
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_1,ZERO,ZERO,PL(0,182),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,182))
          CALL FFV1L2_1(PL(0,182),W(1,10),GC_1,ZERO,ZERO,PL(0,183)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,182),4,COEFS,4,4,WL(1,0,1
     $     ,183))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,183),2,4,19,1,185,H)
C         Coefficient construction for loop diagram with ID 94
          CALL FFV2_3L2_1(PL(0,182),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,184),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,182),4,COEFS,4,4,WL(1,0,1
     $     ,184))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,184),2,4,19,1,186,H)
C         Coefficient construction for loop diagram with ID 95
          CALL FFV2_3L2_1(PL(0,0),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,185),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,185))
          CALL FFV1L2_1(PL(0,185),W(1,10),GC_1,ZERO,ZERO,PL(0,186)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,185),4,COEFS,4,4,WL(1,0,1
     $     ,186))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,186),2,4,19,1,187,H)
C         Coefficient construction for loop diagram with ID 96
          CALL FFV2_3L2_1(PL(0,185),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,187),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,185),4,COEFS,4,4,WL(1,0,1
     $     ,187))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,187),2,4,19,1,188,H)
C         Coefficient construction for loop diagram with ID 97
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_1,ZERO,ZERO,PL(0,188),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,188))
          CALL FFV1L2_1(PL(0,188),W(1,10),GC_1,ZERO,ZERO,PL(0,189)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,188),4,COEFS,4,4,WL(1,0,1
     $     ,189))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,189),2,4,19,1,189,H)
C         Coefficient construction for loop diagram with ID 98
          CALL FFV2_3L2_1(PL(0,188),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,190),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,188),4,COEFS,4,4,WL(1,0,1
     $     ,190))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,190),2,4,19,1,190,H)
C         Coefficient construction for loop diagram with ID 99
          CALL FFV2_3L2_1(PL(0,0),W(1,7),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,191),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,191))
          CALL FFV1L2_1(PL(0,191),W(1,10),GC_1,ZERO,ZERO,PL(0,192)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,191),4,COEFS,4,4,WL(1,0,1
     $     ,192))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,192),2,4,19,1,191,H)
C         Coefficient construction for loop diagram with ID 100
          CALL FFV2_3L2_1(PL(0,191),W(1,11),GC_68,GC_76,ZERO,ZERO,PL(0
     $     ,193),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,191),4,COEFS,4,4,WL(1,0,1
     $     ,193))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,193),2,4,19,1,192,H)
C         Coefficient construction for loop diagram with ID 101
          CALL VVV1L1_3(PL(0,0),W(1,8),GC_4,MDL_MW,ZERO,PL(0,194)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,194))
          CALL VVV1L2P0_1(PL(0,194),W(1,9),GC_4,ZERO,ZERO,PL(0,195)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_1(WL(1,0,1,194),4,COEFS,4,4,WL(1,0,1
     $     ,195))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,195),3,4,42,1,193,H)
C         Coefficient construction for loop diagram with ID 102
          CALL VVS1L1_3(PL(0,0),W(1,8),GC_92,MDL_MW,ZERO,PL(0,196)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,196))
          CALL VVS1L3P0_1(PL(0,196),W(1,9),GC_93,ZERO,ZERO,PL(0,197)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,196),4,COEFS,1,4,WL(1,0,1
     $     ,197))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,197),0,4,42,1,194,H)
C         Coefficient construction for loop diagram with ID 103
          CALL VVS1L1_3(PL(0,0),W(1,7),GC_99,MDL_MH,ZERO,PL(0,198)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,198))
          CALL VVS1L3_1(PL(0,198),W(1,11),GC_99,MDL_MZ,ZERO,PL(0,199)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,198),4,COEFS,1,4,WL(1,0,1
     $     ,199))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,199),1,4,43,1,195,H)
C         Coefficient construction for loop diagram with ID 104
          CALL VVVV2L4_3(PL(0,0),W(1,8),W(1,9),GC_54,MDL_MZ,ZERO,PL(0
     $     ,200),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,200))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,200),2,4,44,2,196,H)
C         Coefficient construction for loop diagram with ID 105
          CALL VVV1L3_2(PL(0,0),W(1,8),GC_71,MDL_MW,ZERO,PL(0,201)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,201))
          CALL VVV1L1_3(PL(0,201),W(1,9),GC_71,MDL_MZ,ZERO,PL(0,202)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,201),4,COEFS,4,4,WL(1,0,1
     $     ,202))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,202),4,4,45,1,197,H)
C         Coefficient construction for loop diagram with ID 106
          CALL VVS1L2_3(PL(0,0),W(1,8),GC_85,MDL_MW,ZERO,PL(0,203)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,203))
          CALL VVS1L3_2(PL(0,203),W(1,9),GC_84,MDL_MZ,ZERO,PL(0,204)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,203),4,COEFS,1,4,WL(1,0,1
     $     ,204))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,204),1,4,45,1,198,H)
C         Coefficient construction for loop diagram with ID 107
          CALL VVVV2L4_3(PL(0,0),W(1,6),W(1,10),GC_5,MDL_MW,ZERO,PL(0
     $     ,205),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,205))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,205),2,4,46,1,199,H)
C         Coefficient construction for loop diagram with ID 108
          CALL VVV1L3_2(PL(0,0),W(1,6),GC_4,MDL_MW,ZERO,PL(0,206)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,206))
          CALL VVV1L3_2(PL(0,206),W(1,10),GC_4,MDL_MW,ZERO,PL(0,207)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,206),4,COEFS,4,4,WL(1,0,1
     $     ,207))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,207),4,4,47,1,200,H)
C         Coefficient construction for loop diagram with ID 109
          CALL VVS1L2_3(PL(0,0),W(1,6),GC_93,MDL_MW,ZERO,PL(0,208)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,208))
          CALL VVS1L3_2(PL(0,208),W(1,10),GC_92,MDL_MW,ZERO,PL(0,209)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,208),4,COEFS,1,4,WL(1,0,1
     $     ,209))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,209),1,4,47,1,201,H)
C         Coefficient construction for loop diagram with ID 110
          CALL VVS1L2_3(PL(0,0),W(1,6),GC_92,MDL_MW,ZERO,PL(0,210)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,210))
          CALL VVS1L3_2(PL(0,210),W(1,10),GC_93,MDL_MW,ZERO,PL(0,211)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,210),4,COEFS,1,4,WL(1,0,1
     $     ,211))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,211),1,4,47,1,202,H)
C         Coefficient construction for loop diagram with ID 111
          CALL VVVV5L3_2(PL(0,0),W(1,6),W(1,11),GC_75,MDL_MW,ZERO,PL(0
     $     ,212),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,212))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,212),2,4,46,1,203,H)
C         Coefficient construction for loop diagram with ID 112
          CALL VVV1L2_1(PL(0,206),W(1,11),GC_71,MDL_MW,ZERO,PL(0,213)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,206),4,COEFS,4,4,WL(1,0,1
     $     ,213))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,213),4,4,47,1,204,H)
C         Coefficient construction for loop diagram with ID 113
          CALL VVS1L3_1(PL(0,208),W(1,11),GC_85,MDL_MW,ZERO,PL(0,214)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,208),4,COEFS,1,4,WL(1,0,1
     $     ,214))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,214),1,4,47,1,205,H)
C         Coefficient construction for loop diagram with ID 114
          CALL VVS1L3_1(PL(0,210),W(1,11),GC_84,MDL_MW,ZERO,PL(0,215)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,210),4,COEFS,1,4,WL(1,0,1
     $     ,215))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,215),1,4,47,1,206,H)
C         Coefficient construction for loop diagram with ID 115
          CALL VVVV5L3_2(PL(0,0),W(1,10),W(1,7),GC_75,MDL_MW,ZERO,PL(0
     $     ,216),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,216))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,216),2,4,46,1,207,H)
C         Coefficient construction for loop diagram with ID 116
          CALL VVV1L2_1(PL(0,0),W(1,7),GC_71,MDL_MW,ZERO,PL(0,217)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,217))
          CALL VVV1L3_2(PL(0,217),W(1,10),GC_4,MDL_MW,ZERO,PL(0,218)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,217),4,COEFS,4,4,WL(1,0,1
     $     ,218))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,218),4,4,47,1,208,H)
C         Coefficient construction for loop diagram with ID 117
          CALL VVS1L1_3(PL(0,0),W(1,7),GC_84,MDL_MW,ZERO,PL(0,219)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,219))
          CALL VVS1L3_2(PL(0,219),W(1,10),GC_92,MDL_MW,ZERO,PL(0,220)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,219),4,COEFS,1,4,WL(1,0,1
     $     ,220))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,220),1,4,47,1,209,H)
C         Coefficient construction for loop diagram with ID 118
          CALL VVS1L1_3(PL(0,0),W(1,7),GC_85,MDL_MW,ZERO,PL(0,221)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,221))
          CALL VVS1L3_2(PL(0,221),W(1,10),GC_93,MDL_MW,ZERO,PL(0,222)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,221),4,COEFS,1,4,WL(1,0,1
     $     ,222))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,222),1,4,47,1,210,H)
C         Coefficient construction for loop diagram with ID 119
          CALL VVVV2L2_1(PL(0,0),W(1,7),W(1,11),GC_54,MDL_MW,ZERO,PL(0
     $     ,223),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,223))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,223),2,4,46,1,211,H)
C         Coefficient construction for loop diagram with ID 120
          CALL VVV1L2_1(PL(0,217),W(1,11),GC_71,MDL_MW,ZERO,PL(0,224)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_2_2(WL(1,0,1,217),4,COEFS,4,4,WL(1,0,1
     $     ,224))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,224),4,4,47,1,212,H)
C         Coefficient construction for loop diagram with ID 121
          CALL VVS1L3_1(PL(0,219),W(1,11),GC_85,MDL_MW,ZERO,PL(0,225)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,219),4,COEFS,1,4,WL(1,0,1
     $     ,225))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,225),1,4,47,1,213,H)
C         Coefficient construction for loop diagram with ID 122
          CALL VVS1L3_1(PL(0,221),W(1,11),GC_84,MDL_MW,ZERO,PL(0,226)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,221),4,COEFS,1,4,WL(1,0,1
     $     ,226))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,226),1,4,47,1,214,H)
C         Coefficient construction for loop diagram with ID 123
          CALL VVVV2L3_1(PL(0,0),W(1,8),W(1,9),GC_53,MDL_MW,ZERO,PL(0
     $     ,227),COEFS)
          CALL ML5_0_UPDATE_WL_0_2(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,227))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,227),2,4,46,1,215,H)
C         Coefficient construction for loop diagram with ID 124
          CALL VVS1L2_3(PL(0,0),W(1,8),GC_90,MDL_MH,ZERO,PL(0,228)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),4,COEFS,4,1,WL(1,0,1
     $     ,228))
          CALL VVS1L3_1(PL(0,228),W(1,9),GC_90,MDL_MW,ZERO,PL(0,229)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,228),4,COEFS,1,4,WL(1,0,1
     $     ,229))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,229),1,4,48,1,216,H)
C         Coefficient construction for loop diagram with ID 125
          CALL UUV1L1_2(PL(0,0),W(1,8),GC_3,MDL_MW,ZERO,PL(0,230)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,230))
          CALL UUV1L1_2(PL(0,230),W(1,9),GC_3,ZERO,ZERO,PL(0,231)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,230),1,COEFS,1,1,WL(1,0,1
     $     ,231))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,231),2,1,42,1,217,H)
C         Coefficient construction for loop diagram with ID 126
          CALL UUV1L2_1(PL(0,0),W(1,8),GC_4,MDL_MW,ZERO,PL(0,232)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,232))
          CALL UUV1L2_1(PL(0,232),W(1,9),GC_4,ZERO,ZERO,PL(0,233)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,232),1,COEFS,1,1,WL(1,0,1
     $     ,233))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,233),2,1,42,1,218,H)
C         Coefficient construction for loop diagram with ID 127
          CALL UUV1L1_2(PL(0,0),W(1,8),GC_70,MDL_MW,ZERO,PL(0,234)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,234))
          CALL UUV1L1_2(PL(0,234),W(1,9),GC_70,MDL_MZ,ZERO,PL(0,235)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,234),1,COEFS,1,1,WL(1,0,1
     $     ,235))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,235),2,1,45,1,219,H)
C         Coefficient construction for loop diagram with ID 128
          CALL UUV1L2_1(PL(0,0),W(1,8),GC_71,MDL_MW,ZERO,PL(0,236)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,236))
          CALL UUV1L2_1(PL(0,236),W(1,9),GC_71,MDL_MZ,ZERO,PL(0,237)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,236),1,COEFS,1,1,WL(1,0,1
     $     ,237))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,237),2,1,45,1,220,H)
C         Coefficient construction for loop diagram with ID 129
          CALL UUV1L1_2(PL(0,0),W(1,6),GC_3,MDL_MW,ZERO,PL(0,238)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,238))
          CALL UUV1L1_2(PL(0,238),W(1,10),GC_3,MDL_MW,ZERO,PL(0,239)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,238),1,COEFS,1,1,WL(1,0,1
     $     ,239))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,239),2,1,47,1,221,H)
C         Coefficient construction for loop diagram with ID 130
          CALL UUV1L1_2(PL(0,238),W(1,11),GC_70,MDL_MW,ZERO,PL(0,240)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,238),1,COEFS,1,1,WL(1,0,1
     $     ,240))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,240),2,1,47,1,222,H)
C         Coefficient construction for loop diagram with ID 131
          CALL UUV1L1_2(PL(0,0),W(1,7),GC_70,MDL_MW,ZERO,PL(0,241)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,241))
          CALL UUV1L1_2(PL(0,241),W(1,10),GC_3,MDL_MW,ZERO,PL(0,242)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,241),1,COEFS,1,1,WL(1,0,1
     $     ,242))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,242),2,1,47,1,223,H)
C         Coefficient construction for loop diagram with ID 132
          CALL UUV1L1_2(PL(0,241),W(1,11),GC_70,MDL_MW,ZERO,PL(0,243)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,241),1,COEFS,1,1,WL(1,0,1
     $     ,243))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,243),2,1,47,1,224,H)
C         Coefficient construction for loop diagram with ID 133
          CALL UUV1L1_2(PL(0,0),W(1,6),GC_4,MDL_MW,ZERO,PL(0,244)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,244))
          CALL UUV1L1_2(PL(0,244),W(1,10),GC_4,MDL_MW,ZERO,PL(0,245)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,244),1,COEFS,1,1,WL(1,0,1
     $     ,245))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,245),2,1,47,1,225,H)
C         Coefficient construction for loop diagram with ID 134
          CALL UUV1L1_2(PL(0,244),W(1,11),GC_71,MDL_MW,ZERO,PL(0,246)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,244),1,COEFS,1,1,WL(1,0,1
     $     ,246))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,246),2,1,47,1,226,H)
C         Coefficient construction for loop diagram with ID 135
          CALL UUV1L1_2(PL(0,0),W(1,7),GC_71,MDL_MW,ZERO,PL(0,247)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,247))
          CALL UUV1L1_2(PL(0,247),W(1,10),GC_4,MDL_MW,ZERO,PL(0,248)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,247),1,COEFS,1,1,WL(1,0,1
     $     ,248))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,248),2,1,47,1,227,H)
C         Coefficient construction for loop diagram with ID 136
          CALL UUV1L1_2(PL(0,247),W(1,11),GC_71,MDL_MW,ZERO,PL(0,249)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,247),1,COEFS,1,1,WL(1,0,1
     $     ,249))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,249),2,1,47,1,228,H)
C         Coefficient construction for loop diagram with ID 137
          CALL FFV2L2_1(PL(0,0),W(1,7),GC_80,ZERO,ZERO,PL(0,250),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,250))
          CALL FFV2L2_1(PL(0,250),W(1,11),GC_80,ZERO,ZERO,PL(0,251)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,250),4,COEFS,4,4,WL(1,0,1
     $     ,251))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,251),2,4,19,1,229,H)
C         Coefficient construction for loop diagram with ID 138
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,ZERO,ZERO,PL(0,252)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,252))
          CALL FFV2L1_2(PL(0,252),W(1,9),GC_132,ZERO,ZERO,PL(0,253)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,252),4,COEFS,4,4,WL(1,0,1
     $     ,253))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,253),2,4,21,1,230,H)
C         Coefficient construction for loop diagram with ID 139
          CALL FFV2L2_1(PL(0,0),W(1,7),GC_80,ZERO,ZERO,PL(0,254),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,254))
          CALL FFV2L2_1(PL(0,254),W(1,11),GC_80,ZERO,ZERO,PL(0,255)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,254),4,COEFS,4,4,WL(1,0,1
     $     ,255))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,255),2,4,19,1,231,H)
C         Coefficient construction for loop diagram with ID 140
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,ZERO,ZERO,PL(0,256)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,256))
          CALL FFV2L1_2(PL(0,256),W(1,9),GC_132,ZERO,ZERO,PL(0,257)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,256),4,COEFS,4,4,WL(1,0,1
     $     ,257))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,257),2,4,21,1,232,H)
C         Coefficient construction for loop diagram with ID 141
          CALL FFV2L2_1(PL(0,0),W(1,7),GC_80,ZERO,ZERO,PL(0,258),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,258))
          CALL FFV2L2_1(PL(0,258),W(1,11),GC_80,ZERO,ZERO,PL(0,259)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,258),4,COEFS,4,4,WL(1,0,1
     $     ,259))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,259),2,4,19,1,233,H)
C         Coefficient construction for loop diagram with ID 142
          CALL FFV2L1_2(PL(0,0),W(1,8),GC_132,ZERO,ZERO,PL(0,260)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,260))
          CALL FFV2L1_2(PL(0,260),W(1,9),GC_132,ZERO,ZERO,PL(0,261)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,260),4,COEFS,4,4,WL(1,0,1
     $     ,261))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,261),2,4,21,1,234,H)
C         Coefficient construction for loop diagram with ID 143
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_3,ZERO,ZERO,PL(0,262),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,262))
          CALL FFV1L2_1(PL(0,262),W(1,10),GC_3,ZERO,ZERO,PL(0,263)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,262),4,COEFS,4,4,WL(1,0,1
     $     ,263))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,263),2,4,19,1,235,H)
C         Coefficient construction for loop diagram with ID 144
          CALL FFV2_4L2_1(PL(0,262),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,264),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,262),4,COEFS,4,4,WL(1,0,1
     $     ,264))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,264),2,4,19,1,236,H)
C         Coefficient construction for loop diagram with ID 145
          CALL FFV2_4L2_1(PL(0,0),W(1,7),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,265),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,265))
          CALL FFV1L2_1(PL(0,265),W(1,10),GC_3,ZERO,ZERO,PL(0,266)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,265),4,COEFS,4,4,WL(1,0,1
     $     ,266))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,266),2,4,19,1,237,H)
C         Coefficient construction for loop diagram with ID 146
          CALL FFV2_4L2_1(PL(0,265),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,267),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,265),4,COEFS,4,4,WL(1,0,1
     $     ,267))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,267),2,4,19,1,238,H)
C         Coefficient construction for loop diagram with ID 147
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_3,ZERO,ZERO,PL(0,268),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,268))
          CALL FFV1L2_1(PL(0,268),W(1,10),GC_3,ZERO,ZERO,PL(0,269)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,268),4,COEFS,4,4,WL(1,0,1
     $     ,269))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,269),2,4,19,1,239,H)
C         Coefficient construction for loop diagram with ID 148
          CALL FFV2_4L2_1(PL(0,268),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,270),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,268),4,COEFS,4,4,WL(1,0,1
     $     ,270))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,270),2,4,19,1,240,H)
C         Coefficient construction for loop diagram with ID 149
          CALL FFV2_4L2_1(PL(0,0),W(1,7),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,271),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,271))
          CALL FFV1L2_1(PL(0,271),W(1,10),GC_3,ZERO,ZERO,PL(0,272)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,271),4,COEFS,4,4,WL(1,0,1
     $     ,272))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,272),2,4,19,1,241,H)
C         Coefficient construction for loop diagram with ID 150
          CALL FFV2_4L2_1(PL(0,271),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,273),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,271),4,COEFS,4,4,WL(1,0,1
     $     ,273))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,273),2,4,19,1,242,H)
C         Coefficient construction for loop diagram with ID 151
          CALL FFV1L2_1(PL(0,0),W(1,6),GC_3,ZERO,ZERO,PL(0,274),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,274))
          CALL FFV1L2_1(PL(0,274),W(1,10),GC_3,ZERO,ZERO,PL(0,275)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,274),4,COEFS,4,4,WL(1,0,1
     $     ,275))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,275),2,4,19,1,243,H)
C         Coefficient construction for loop diagram with ID 152
          CALL FFV2_4L2_1(PL(0,274),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,276),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,274),4,COEFS,4,4,WL(1,0,1
     $     ,276))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,276),2,4,19,1,244,H)
C         Coefficient construction for loop diagram with ID 153
          CALL FFV2_4L2_1(PL(0,0),W(1,7),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,277),COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),4,COEFS,4,4,WL(1,0,1
     $     ,277))
          CALL FFV1L2_1(PL(0,277),W(1,10),GC_3,ZERO,ZERO,PL(0,278)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,277),4,COEFS,4,4,WL(1,0,1
     $     ,278))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,278),2,4,19,1,245,H)
C         Coefficient construction for loop diagram with ID 154
          CALL FFV2_4L2_1(PL(0,277),W(1,11),GC_68,GC_77,ZERO,ZERO,PL(0
     $     ,279),COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,277),4,COEFS,4,4,WL(1,0,1
     $     ,279))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,279),2,4,19,1,246,H)
C         Coefficient construction for loop diagram with ID 155
          CALL VVSS1L4_3(PL(0,0),W(1,7),W(1,11),GC_83,MDL_MH,ZERO,PL(0
     $     ,280),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,280))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,280),0,1,49,2,247,H)
C         Coefficient construction for loop diagram with ID 156
          CALL VSS1L3_2(PL(0,0),W(1,7),GC_78,MDL_MZ,ZERO,PL(0,281)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,281))
          CALL VSS1L2_3(PL(0,281),W(1,11),GC_78,MDL_MH,ZERO,PL(0,282)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,281),1,COEFS,1,1,WL(1,0,1
     $     ,282))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,282),2,1,50,1,248,H)
C         Coefficient construction for loop diagram with ID 157
          CALL VVSS1L4_3(PL(0,0),W(1,8),W(1,9),GC_52,MDL_MH,ZERO,PL(0
     $     ,283),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,283))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,283),0,1,49,2,249,H)
C         Coefficient construction for loop diagram with ID 158
          CALL VSS1L3_2(PL(0,0),W(1,8),GC_55,MDL_MW,ZERO,PL(0,284)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,284))
          CALL VSS1L2_3(PL(0,284),W(1,9),GC_55,MDL_MH,ZERO,PL(0,285)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,284),1,COEFS,1,1,WL(1,0,1
     $     ,285))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,285),2,1,51,1,250,H)
C         Coefficient construction for loop diagram with ID 159
          CALL VVSS1L4_3(PL(0,0),W(1,7),W(1,11),GC_83,MDL_MZ,ZERO,PL(0
     $     ,286),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,286))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,286),0,1,44,2,251,H)
C         Coefficient construction for loop diagram with ID 160
          CALL VVSS1L4_3(PL(0,0),W(1,8),W(1,9),GC_52,MDL_MZ,ZERO,PL(0
     $     ,287),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,287))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,287),0,1,44,2,252,H)
C         Coefficient construction for loop diagram with ID 161
          CALL VSS1L2_3(PL(0,0),W(1,8),GC_57,MDL_MW,ZERO,PL(0,288)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,288))
          CALL VSS1L3_2(PL(0,288),W(1,9),GC_56,MDL_MZ,ZERO,PL(0,289)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,288),1,COEFS,1,1,WL(1,0,1
     $     ,289))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,289),2,1,45,1,253,H)
C         Coefficient construction for loop diagram with ID 162
          CALL VVSS1L4_3(PL(0,0),W(1,6),W(1,10),GC_6,MDL_MW,ZERO,PL(0
     $     ,290),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,290))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,290),0,1,46,1,254,H)
C         Coefficient construction for loop diagram with ID 163
          CALL VSS1L3_2(PL(0,0),W(1,6),GC_3,MDL_MW,ZERO,PL(0,291)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,291))
          CALL VSS1L3_2(PL(0,291),W(1,10),GC_3,MDL_MW,ZERO,PL(0,292)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,291),1,COEFS,1,1,WL(1,0,1
     $     ,292))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,292),2,1,47,1,255,H)
C         Coefficient construction for loop diagram with ID 164
          CALL VVSS1L4_3(PL(0,0),W(1,6),W(1,11),GC_81,MDL_MW,ZERO,PL(0
     $     ,293),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,293))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,293),0,1,46,1,256,H)
C         Coefficient construction for loop diagram with ID 165
          CALL VSS1L3_2(PL(0,291),W(1,11),GC_79,MDL_MW,ZERO,PL(0,294)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,291),1,COEFS,1,1,WL(1,0,1
     $     ,294))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,294),2,1,47,1,257,H)
C         Coefficient construction for loop diagram with ID 166
          CALL VVSS1L4_3(PL(0,0),W(1,10),W(1,7),GC_81,MDL_MW,ZERO,PL(0
     $     ,295),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,295))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,295),0,1,46,1,258,H)
C         Coefficient construction for loop diagram with ID 167
          CALL VSS1L3_2(PL(0,0),W(1,7),GC_79,MDL_MW,ZERO,PL(0,296)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_0_1(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,296))
          CALL VSS1L3_2(PL(0,296),W(1,10),GC_3,MDL_MW,ZERO,PL(0,297)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,296),1,COEFS,1,1,WL(1,0,1
     $     ,297))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,297),2,1,47,1,259,H)
C         Coefficient construction for loop diagram with ID 168
          CALL VVSS1L4_3(PL(0,0),W(1,7),W(1,11),GC_82,MDL_MW,ZERO,PL(0
     $     ,298),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,298))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,298),0,1,46,1,260,H)
C         Coefficient construction for loop diagram with ID 169
          CALL VSS1L3_2(PL(0,296),W(1,11),GC_79,MDL_MW,ZERO,PL(0,299)
     $     ,COEFS)
          CALL ML5_0_UPDATE_WL_1_1(WL(1,0,1,296),1,COEFS,1,1,WL(1,0,1
     $     ,299))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,299),2,1,47,1,261,H)
C         Coefficient construction for loop diagram with ID 170
          CALL VVSS1L4_3(PL(0,0),W(1,8),W(1,9),GC_52,MDL_MW,ZERO,PL(0
     $     ,300),COEFS)
          CALL ML5_0_UPDATE_WL_0_0(WL(1,0,1,0),1,COEFS,1,1,WL(1,0,1
     $     ,300))
          CALL ML5_0_CREATE_LOOP_COEFS(WL(1,0,1,300),0,1,46,1,262,H)
C         At this point, all loop coefficients needed for (QCD=2
C          QED=4), i.e. of split order ID=1, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.2) GOTO 4000
C         At this point, all loop coefficients needed for (QCD=0
C          QED=6), i.e. of split order ID=2, are computed.
          IF(FILTER_SO.AND.SQSO_TARGET.EQ.3) GOTO 4000
 4000     CONTINUE
          LOOP_REQ_SO_DONE=.TRUE.

        ENDIF
      ENDDO

C     Grouping of loop diagrams now done directly when creating the
C      LOOPCOEFS.

      DO I=0,NSQUAREDSO
        DO J=1,3
          BUFFR_BIS(J,I)=ANS(J,I)
        ENDDO
      ENDDO

 300  CONTINUE
C     Free cache when using IREGI
      IF(IREGIRECY.AND.MLREDUCTIONLIB(I_LIB).EQ.3)CALL IREGI_FREE_PS

      DO I=0,NSQUAREDSO
        DO J=1,3
          ANS(J,I)=BUFFR_BIS(J,I)
        ENDDO
      ENDDO

      IF(SKIPLOOPEVAL) THEN
        GOTO 1226
      ENDIF

      DO I_SO=1,NSQUAREDSO
        DO J=1,NLOOPGROUPS
          S(I_SO,J)=.TRUE.
        ENDDO
        IF (FILTER_SO.AND.SQSO_TARGET.NE.I_SO) GOTO 5001
C       CutTools call for loop numbers 1,2,22,75,77
        CALL ML5_0_LOOP_3(3,4,6,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO)
     $   ,2,I_SO,1)
C       CutTools call for loop numbers 3,34
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO)
     $   ,2,I_SO,2)
C       CutTools call for loop numbers 4,38
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO)
     $   ,2,I_SO,3)
C       CutTools call for loop numbers 5,54
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(MDL_
     $   MW),DCMPLX(ZERO),4,I_SO,4)
C       CutTools call for loop numbers 6,7,20,50,51
        CALL ML5_0_LOOP_3(1,2,10,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),2,I_SO,5)
C       CutTools call for loop numbers 8,16,42
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),DCMPLX(ZERO),2,I_SO,6)
C       CutTools call for loop numbers 9,44
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(ZERO),DCMPLX(MDL_MZ)
     $   ,DCMPLX(ZERO),DCMPLX(ZERO),4,I_SO,7)
C       CutTools call for loop numbers 10,13,43
        CALL ML5_0_LOOP_4(1,2,3,4,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),DCMPLX(ZERO),2,I_SO,8)
C       CutTools call for loop numbers 11,45
        CALL ML5_0_LOOP_4(1,2,3,4,DCMPLX(ZERO),DCMPLX(MDL_MZ)
     $   ,DCMPLX(ZERO),DCMPLX(ZERO),4,I_SO,9)
C       CutTools call for loop numbers 12,55
        CALL ML5_0_LOOP_4(1,3,2,4,DCMPLX(ZERO),DCMPLX(MDL_MW)
     $   ,DCMPLX(ZERO),DCMPLX(ZERO),4,I_SO,10)
C       CutTools call for loop numbers 14,47
        CALL ML5_0_LOOP_4(1,2,3,4,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),DCMPLX(MDL_MZ),4,I_SO,11)
C       CutTools call for loop numbers 15,58
        CALL ML5_0_LOOP_4(1,3,2,4,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),DCMPLX(MDL_MW),4,I_SO,12)
C       CutTools call for loop numbers 17,46
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),DCMPLX(MDL_MZ),4,I_SO,13)
C       CutTools call for loop numbers 18,87
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(MDL_MW),DCMPLX(ZERO)
     $   ,DCMPLX(ZERO),DCMPLX(ZERO),4,I_SO,14)
C       CutTools call for loop numbers 19,29,30
        CALL ML5_0_LOOP_3(3,4,5,DCMPLX(MDL_MW),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),4,I_SO,15)
C       CutTools call for loop numbers 21,52,53
        CALL ML5_0_LOOP_3(1,2,12,DCMPLX(MDL_MZ),DCMPLX(ZERO),DCMPLX(ZER
     $   O),4,I_SO,16)
C       CutTools call for loop numbers 23,76,78
        CALL ML5_0_LOOP_3(3,4,5,DCMPLX(MDL_MZ),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),4,I_SO,17)
C       CutTools call for loop numbers 24,85,86
        CALL ML5_0_LOOP_3(1,2,12,DCMPLX(MDL_MW),DCMPLX(ZERO),DCMPLX(ZER
     $   O),4,I_SO,18)
C       At this point, all reductions needed for (QCD=4 QED=2), i.e.
C        of split order ID=0, are computed.
        IF(FILTER_SO.AND.SQSO_TARGET.EQ.1) GOTO 5000
C       CutTools call for loop numbers 25,26,27,28,61,62,63,64,71,72,73
C       ,74,89,90,91,92,93,94,95,96,133,135,137,139,140,141,142,143,144
C       ,145,146,147,148,149,150
        CALL ML5_0_LOOP_2(6,10,DCMPLX(ZERO),DCMPLX(ZERO),2,I_SO,19)
C       CutTools call for loop numbers 31,32
        CALL ML5_0_LOOP_3(3,4,6,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(MDL_
     $   MW),5,I_SO,20)
C       CutTools call for loop numbers 33,65,134,136,138
        CALL ML5_0_LOOP_2(8,9,DCMPLX(ZERO),DCMPLX(ZERO),2,I_SO,21)
C       CutTools call for loop numbers 35
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(MDL_MZ),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),4,I_SO,22)
C       CutTools call for loop numbers 36
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(ZERO
     $   ),4,I_SO,23)
C       CutTools call for loop numbers 37
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(MDL_
     $   MZ),5,I_SO,24)
C       CutTools call for loop numbers 39
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(MDL_MZ),DCMPLX(ZERO),DCMPLX(ZERO
     $   ),4,I_SO,25)
C       CutTools call for loop numbers 40
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(ZERO
     $   ),4,I_SO,26)
C       CutTools call for loop numbers 41
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(MDL_
     $   MZ),5,I_SO,27)
C       CutTools call for loop numbers 48
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(ZERO),DCMPLX(MDL_MZ)
     $   ,DCMPLX(ZERO),DCMPLX(MDL_MZ),6,I_SO,28)
C       CutTools call for loop numbers 49
        CALL ML5_0_LOOP_4(1,2,3,4,DCMPLX(ZERO),DCMPLX(MDL_MZ)
     $   ,DCMPLX(ZERO),DCMPLX(MDL_MZ),6,I_SO,29)
C       CutTools call for loop numbers 56
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(MDL_MZ),DCMPLX(ZERO)
     $   ,DCMPLX(MDL_MW),DCMPLX(ZERO),6,I_SO,30)
C       CutTools call for loop numbers 57
        CALL ML5_0_LOOP_4(1,3,2,4,DCMPLX(ZERO),DCMPLX(MDL_MW)
     $   ,DCMPLX(ZERO),DCMPLX(MDL_MZ),6,I_SO,31)
C       CutTools call for loop numbers 59
        CALL ML5_0_LOOP_4(1,3,2,4,DCMPLX(ZERO),DCMPLX(MDL_MZ)
     $   ,DCMPLX(ZERO),DCMPLX(MDL_MW),6,I_SO,32)
C       CutTools call for loop numbers 60
        CALL ML5_0_LOOP_4(1,2,3,4,DCMPLX(ZERO),DCMPLX(MDL_MW)
     $   ,DCMPLX(ZERO),DCMPLX(MDL_MW),6,I_SO,33)
C       CutTools call for loop numbers 66,67,68,69
        CALL ML5_0_LOOP_2(6,10,DCMPLX(MDL_MT),DCMPLX(MDL_MT),2,I_SO,34)
C       CutTools call for loop numbers 70
        CALL ML5_0_LOOP_2(8,9,DCMPLX(MDL_MT),DCMPLX(ZERO),2,I_SO,35)
C       CutTools call for loop numbers 79
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(MDL_MW
     $   ),3,I_SO,36)
C       CutTools call for loop numbers 80
        CALL ML5_0_LOOP_3(2,4,8,DCMPLX(ZERO),DCMPLX(MDL_MZ),DCMPLX(MDL_
     $   MW),5,I_SO,37)
C       CutTools call for loop numbers 81
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(ZERO),DCMPLX(ZERO),DCMPLX(MDL_MW
     $   ),3,I_SO,38)
C       CutTools call for loop numbers 82
        CALL ML5_0_LOOP_3(1,3,9,DCMPLX(ZERO),DCMPLX(MDL_MZ),DCMPLX(MDL_
     $   MW),5,I_SO,39)
C       CutTools call for loop numbers 83,84
        CALL ML5_0_LOOP_3(1,2,10,DCMPLX(ZERO),DCMPLX(MDL_MW),DCMPLX(MDL
     $   _MW),5,I_SO,40)
C       CutTools call for loop numbers 88
        CALL ML5_0_LOOP_4(1,2,4,3,DCMPLX(MDL_MW),DCMPLX(ZERO)
     $   ,DCMPLX(MDL_MZ),DCMPLX(ZERO),6,I_SO,41)
C       CutTools call for loop numbers 97,121,122,98
        CALL ML5_0_LOOP_2(8,9,DCMPLX(MDL_MW),DCMPLX(ZERO),3,I_SO,42)
C       CutTools call for loop numbers 99
        CALL ML5_0_LOOP_2(7,11,DCMPLX(MDL_MH),DCMPLX(MDL_MZ),1,I_SO,43)
C       CutTools call for loop numbers 100,155,156
        CALL ML5_0_LOOP_1_2(2,8,9,DCMPLX(MDL_MZ),2,I_SO,44)
C       CutTools call for loop numbers 101,123,124,157,102
        CALL ML5_0_LOOP_2(8,9,DCMPLX(MDL_MW),DCMPLX(MDL_MZ),4,I_SO,45)
C       CutTools call for loop numbers 103,107,111,115,119,158,160,162,
C       164,166
        CALL ML5_0_LOOP_1_2(2,6,10,DCMPLX(MDL_MW),2,I_SO,46)
C       CutTools call for loop numbers 104,108,112,116,125,126,127,128,
C       129,130,131,132,159,161,163,165,105,106,109,110,113,114,117,118
        CALL ML5_0_LOOP_2(6,10,DCMPLX(MDL_MW),DCMPLX(MDL_MW),4,I_SO,47)
C       CutTools call for loop numbers 120
        CALL ML5_0_LOOP_2(8,9,DCMPLX(MDL_MH),DCMPLX(MDL_MW),1,I_SO,48)
C       CutTools call for loop numbers 151,153
        CALL ML5_0_LOOP_1_2(2,7,11,DCMPLX(MDL_MH),0,I_SO,49)
C       CutTools call for loop numbers 152
        CALL ML5_0_LOOP_2(7,11,DCMPLX(MDL_MZ),DCMPLX(MDL_MH),2,I_SO,50)
C       CutTools call for loop numbers 154
        CALL ML5_0_LOOP_2(8,9,DCMPLX(MDL_MW),DCMPLX(MDL_MH),2,I_SO,51)
C       At this point, all reductions needed for (QCD=2 QED=4), i.e.
C        of split order ID=1, are computed.
        IF(FILTER_SO.AND.SQSO_TARGET.EQ.2) GOTO 5000
C       At this point, all reductions needed for (QCD=0 QED=6), i.e.
C        of split order ID=2, are computed.
        IF(FILTER_SO.AND.SQSO_TARGET.EQ.3) GOTO 5000
        GOTO 5001
 5000   CONTINUE
        CTCALL_REQ_SO_DONE=.TRUE.
 5001   CONTINUE
      ENDDO

      DO I=1,NLOOPGROUPS
        LTEMP=.TRUE.
        DO K=1,NSQUAREDSO
          IF (.NOT.FILTER_SO.OR.SQSO_TARGET.EQ.K) THEN
            IF (.NOT.S(K,I)) LTEMP=.FALSE.
            DO J=1,3
              ANS(J,K)=ANS(J,K)+LOOPRES(J,K,I)
              ANS(J,0)=ANS(J,0)+LOOPRES(J,K,I)
            ENDDO
          ENDIF
        ENDDO
        IF((CTMODERUN.NE.-1).AND..NOT.CHECKPHASE.AND.(.NOT.LTEMP)) THEN
          WRITE(*,*) '##W03 WARNING Contribution ',I,' is unstable.'
        ENDIF
      ENDDO

 1226 CONTINUE

      IF (CHECKPHASE.OR.(.NOT.HELDOUBLECHECKED)) THEN
        IF((USERHEL.EQ.-1).OR.(USERHEL.EQ.HELPICKED)) THEN
C         TO KEEP TRACK OF THE FINAL ANSWER TO BE RETURNED DURING
C          CHECK PHASE
          DO I=0,NSQUAREDSO
            DO K=1,3
              BUFFR(K,I)=BUFFR(K,I)+ANS(K,I)
            ENDDO
          ENDDO
        ENDIF
C       SAVE RESULT OF EACH INDEPENDENT HELICITY FOR COMPARISON DURING
C        THE HELICITY FILTER SETUP
        HELSAVED(1,HELPICKED)=ANS(1,0)
        HELSAVED(2,HELPICKED)=ANS(2,0)
        HELSAVED(3,HELPICKED)=ANS(3,0)

        IF (CHECKPHASE) THEN
C         SET THE HELICITY FILTER
          IF(.NOT.FOUNDHELFILTER) THEN
            HEL_INCONSISTENT=.FALSE.
            IF(ML5_0_ISZERO(ABS(ANS(1,0))+ABS(ANS(2,0))+ABS(ANS(3,0))
     $       ,REF/DBLE(NCOMB),-1,-1)) THEN
              IF(NTRY.EQ.1) THEN
                GOODHEL(HELPICKED)=-HELOFFSET
              ELSEIF(GOODHEL(HELPICKED).NE.-HELOFFSET) THEN
                WRITE(*,*) '##W02A WARNING Inconsistent helicity '
     $           ,HELPICKED
                IF(HELINITSTARTOVER) THEN
                  WRITE(*,*) '##I01 INFO Initialization starting ove'
     $             //'r because of inconsistency in the helicit'
     $             //'y filter setup.'
                  NTRY=0
                ELSE
                  HEL_INCONSISTENT=.TRUE.
                ENDIF
              ENDIF
            ELSE
              DO H=1,HELPICKED-1
                IF(GOODHEL(H).GT.-HELOFFSET) THEN
C                 Be looser for helicity check, bring a factor 100
                  DUMMY=ML5_0_ISSAME(ANS(1,0),HELSAVED(1,H),REF
     $             ,.FALSE.)
                  IF(DUMMY.NE.0) THEN
                    IF(NTRY.EQ.1) THEN
C                     Set the matching helicity to be contributing
C                      once more
                      GOODHEL(H)=GOODHEL(H)+DUMMY
C                     Use an offset to clearly show it is linked to an
C                      other one and to avoid overlap
                      GOODHEL(HELPICKED)=-H-HELOFFSET
C                     Make sure we have paired this hel config to the
C                      same one last PS point
                    ELSEIF(GOODHEL(HELPICKED).NE.(-H-HELOFFSET)) THEN
                      WRITE(*,*) '##W02B WARNING Inconsistent helicit'
     $                 //'y ',HELPICKED
                      IF(HELINITSTARTOVER) THEN
                        WRITE(*,*) '##I01 INFO Initialization startin'
     $                   //'g over because of inconsistency in th'
     $                   //'e helicity filter setup.'
                        NTRY=0
                      ELSE
                        HEL_INCONSISTENT=.TRUE.
                      ENDIF
                    ENDIF
                  ENDIF
                ENDIF
              ENDDO
            ENDIF
            IF(HEL_INCONSISTENT) THEN
C             This helicity has unstable filter so we will always
C              compute it by itself.
C             We therefore also need to remove it from the multiplicati
C             ve factor of the corresponding helicity.
              IF(GOODHEL(HELPICKED).LT.-HELOFFSET) THEN
                GOODHEL(-GOODHEL(HELPICKED)-HELOFFSET)=GOODHEL(
     $           -GOODHEL(HELPICKED)-HELOFFSET)-1
              ENDIF
C             If several helicities were matched to that one, we need
C              to chose another one as reference and redirect the
C              others to this new one
C             Of course if it is one, then we do not need to do
C              anything (because with HELINITSTARTOVER=.FALSE. we only
C              support exactly identical Hels.)
              IF(GOODHEL(HELPICKED).GT.-HELOFFSET.AND.GOODHEL(HELPICKED
     $         ).NE.1) THEN
                NEWHELREF=-1
                DO H=1,NCOMB
                  IF (GOODHEL(H).EQ.(-HELOFFSET-HELPICKED)) THEN
                    IF (NEWHELREF.EQ.-1) THEN
                      NEWHELREF=H
                      GOODHEL(H)=GOODHEL(HELPICKED)-1
                    ELSE
                      GOODHEL(H)=-NEWHELREF-HELOFFSET
                    ENDIF
                  ENDIF
                ENDDO
              ENDIF
C             In all cases, from now on this helicity will be computed
C              independantly of the others.
C             In particular, it is the only thing to do if the
C              helicity was flagged not contributing.
              GOODHEL(HELPICKED)=1
            ENDIF
          ENDIF

C         SET THE LOOP FILTER
          IF(.NOT.FOUNDLOOPFILTER.AND.USELOOPFILTER) THEN
            DO I=1,NLOOPGROUPS
              DO J=1,NSQUAREDSO
                IF(.NOT.ML5_0_ISZERO(ABS(LOOPRES(1,J,I))+ABS(LOOPRES(2
     $           ,J,I))+ABS(LOOPRES(3,J,I)),(REF*1.0D-4),I,J)) THEN
                  IF(NTRY.EQ.1) THEN
                    GOODAMP(J,I)=.TRUE.
                    LOOPFILTERBUFF(J,I)=.TRUE.
                  ELSEIF(.NOT.LOOPFILTERBUFF(J,I)) THEN
                    WRITE(*,*) '##W02 WARNING Inconsistent loop amp '
     $               ,I,'.'
                    IF(LOOPINITSTARTOVER) THEN
                      WRITE(*,*) '##I01 INFO Initialization startin'
     $                 //'g over because of inconsistency in the loo'
     $                 //'p filter setup.'
                      NTRY=0
                    ELSE
                      GOODAMP(J,I)=.TRUE.
                    ENDIF
                  ENDIF
                ENDIF
              ENDDO
            ENDDO
          ENDIF
        ELSEIF (.NOT.HELDOUBLECHECKED.AND.NTRY.NE.0)THEN
C         DOUBLE CHECK THE HELICITY FILTER
          IF (GOODHEL(HELPICKED).EQ.-HELOFFSET) THEN
            IF (.NOT.ML5_0_ISZERO(ABS(ANS(1,0))+ABS(ANS(2,0))
     $       +ABS(ANS(3,0)),REF/DBLE(NCOMB),-1,-1)) THEN
              WRITE(*,*) '##W15 Helicity filter could not be successfu'
     $         //'lly double checked.'
              WRITE(*,*) 'One reason for this is that you might hav'
     $         //'e changed sensible parameters which affected wha'
     $         //'t are the zero helicity configurations.'
              WRITE(*,*) 'MadLoop will try to reset the Helicit'
     $         //'y filter with the next PS points it receives.'
              NTRY=0
              OPEN(29,FILE=HELFILTERFN,ERR=348)
 348          CONTINUE
              CLOSE(29,STATUS='delete')
            ENDIF
          ENDIF
          IF (GOODHEL(HELPICKED).LT.-HELOFFSET.AND.NTRY.NE.0) THEN
            IF(ML5_0_ISSAME(ANS(1,0),HELSAVED(1,ABS(GOODHEL(HELPICKED)
     $       +HELOFFSET)),REF,.TRUE.).EQ.0) THEN
              WRITE(*,*) '##W15 Helicity filter could not be successfu'
     $         //'lly double checked.'
              WRITE(*,*) 'One reason for this is that you might hav'
     $         //'e changed sensible parameters which affected th'
     $         //'e helicity dependance relations.'
              WRITE(*,*) 'MadLoop will try to reset the Helicit'
     $         //'y filter with the next PS points it receives.'
              NTRY=0
              OPEN(30,FILE=HELFILTERFN,ERR=349)
 349          CONTINUE
              CLOSE(30,STATUS='delete')
            ENDIF
          ENDIF
C         SET HELDOUBLECHECKED TO .TRUE. WHEN DONE
C         even if it failed we do not want to redo the check afterwards
C          if HELINITSTARTOVER=.FALSE.
          IF (HELPICKED.EQ.NCOMB.AND.(NTRY.NE.0.OR..NOT.HELINITSTARTOVE
     $     R)) THEN
            DONEHELDOUBLECHECK=.TRUE.
          ENDIF
        ENDIF

C       GOTO NEXT HELICITY OR FINISH
        IF(HELPICKED.NE.NCOMB) THEN
          HELPICKED=HELPICKED+1
          MP_DONE=.FALSE.
          GOTO 200
        ELSE
C         Useful printout
C         do I=1,NCOMB
C         write(*,*) 'HELSAVED(1,',I,')=',HELSAVED(1,I)
C         write(*,*) 'HELSAVED(2,',I,')=',HELSAVED(2,I)
C         write(*,*) 'HELSAVED(3,',I,')=',HELSAVED(3,I)
C         write(*,*) '   GOODHEL(',I,')=',GOODHEL(I)
C         ENDDO
          DO I=0,NSQUAREDSO
            DO K=1,3
              ANS(K,I)=BUFFR(K,I)
            ENDDO
          ENDDO
          IF(NTRY.EQ.0) THEN
            NATTEMPTS=NATTEMPTS+1
            IF(NATTEMPTS.EQ.MAXATTEMPTS) THEN
              WRITE(*,*) '##E01 ERROR Could not initialize the filter'
     $         //'s in ',MAXATTEMPTS,' trials'
              STOP 1
            ENDIF
          ENDIF
        ENDIF

      ENDIF

      DO K=1,3
        DO I=0,NSQUAREDSO
          ANS(K,I)=ANS(K,I)/DBLE(IDEN)
          IF (USERHEL.NE.-1) THEN
            ANS(K,I)=ANS(K,I)*HELAVGFACTOR
          ENDIF
        ENDDO
      ENDDO

      IF(.NOT.CHECKPHASE.AND.HELDOUBLECHECKED.AND.(CTMODERUN.EQ.
     $ -1)) THEN
        STAB_INDEX=STAB_INDEX+1
        IF(DOING_QP_EVALS.AND.MLREDUCTIONLIB(I_LIB).EQ.1) THEN
C         NOW,ONLY CUTTOOLS PROVIDES QP
          DO I=0,NSQUAREDSO
            DO K=1,3
              QP_RES(K,I,STAB_INDEX)=ANS(K,I)
            ENDDO
          ENDDO
        ELSE
          DO I=0,NSQUAREDSO
            DO K=1,3
              DP_RES(K,I,STAB_INDEX)=ANS(K,I)
            ENDDO
          ENDDO
        ENDIF

        IF(DOING_QP_EVALS.AND.MLREDUCTIONLIB(I_LIB).EQ.1) THEN
          BASIC_CT_MODE=4
        ELSE
          BASIC_CT_MODE=1
        ENDIF

C       BEGINNING OF THE DEFINITIONS OF THE DIFFERENT EVALUATION
C        METHODS

        IF(.NOT.EVAL_DONE(2)) THEN
          EVAL_DONE(2)=.TRUE.
          CTMODE=BASIC_CT_MODE+1
          GOTO 300
        ENDIF

        CTMODE=BASIC_CT_MODE

        IF(.NOT.EVAL_DONE(3).AND. ((DOING_QP_EVALS.AND.NROTATIONS_QP.GE
     $   .1).OR.((.NOT.DOING_QP_EVALS).AND.NROTATIONS_DP.GE.1)) ) THEN
          EVAL_DONE(3)=.TRUE.
          CALL ML5_0_ROTATE_PS(PS,P,1)
          IF (DOING_QP_EVALS) CALL ML5_0_MP_ROTATE_PS(MP_PS,MP_P,1)
          GOTO 200
        ENDIF

        IF(.NOT.EVAL_DONE(4).AND. ((DOING_QP_EVALS.AND.NROTATIONS_QP.GE
     $   .2).OR.((.NOT.DOING_QP_EVALS).AND.NROTATIONS_DP.GE.2)) ) THEN
          EVAL_DONE(4)=.TRUE.
          CALL ML5_0_ROTATE_PS(PS,P,2)
          IF (DOING_QP_EVALS) CALL ML5_0_MP_ROTATE_PS(MP_PS,MP_P,2)
          GOTO 200
        ENDIF

        CALL ML5_0_ROTATE_PS(PS,P,0)
        IF (DOING_QP_EVALS) CALL ML5_0_MP_ROTATE_PS(MP_PS,MP_P,0)

C       END OF THE DEFINITIONS OF THE DIFFERENT EVALUATION METHODS

        IF(DOING_QP_EVALS.AND.MLREDUCTIONLIB(I_LIB).EQ.1) THEN
          CALL ML5_0_COMPUTE_ACCURACY(QP_RES,N_QP_EVAL,ACC,ANS)
          DO I=0,NSQUAREDSO
            ACCURACY(I)=ACC(I)
          ENDDO
          RET_CODE_H=3
          RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.TRUE.
     $     ,.TRUE.)
          IF(MAXVAL(ACC).GE.MLSTABTHRES) THEN
            I_QP_LIB=I_QP_LIB+1
            IF(I_QP_LIB.GT.QP_NLOOPLIB.OR.INDEX_QP_TOOLS(I_QP_LIB
     $       ).EQ.0)THEN
              RET_CODE_H=4
              RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.TRUE.
     $         ,.FALSE.)
              NEPS=NEPS+1
              CALL ML5_0_COMPUTE_ACCURACY(DP_RES,N_DP_EVAL,TEMP1,TEMP)
              IF(NEPS.LE.10) THEN
                WRITE(*,*) '##W03 WARNING An unstable PS point was'
     $           ,       ' detected.'
                IF (NSQUAREDSO.NE.1) THEN
                  WRITE(*,*) 'Accuracies for each split orde'
     $             //'r, starting with the summed case'
                  WRITE(*,*) 'DP accuracies (for each split order): '
     $             ,(TEMP1(I),I=0,NSQUAREDSO)
                  WRITE(*,*) 'QP accuracies (for each split order): '
     $             ,(ACC(I),I=0,NSQUAREDSO)
                ELSE
                  WRITE(*,*) 'DP accuracy: ',TEMP1(1)
                  WRITE(*,*) 'QP accuracy: ',ACC(1)
                ENDIF
                DO J=0,NSQUAREDSO
                  IF (NSQUAREDSO.NE.1.OR.J.NE.0) THEN
                    IF (J.EQ.0) THEN
                      WRITE(*,*) 'Details for all split orders summe'
     $                 //'d :'
                    ELSE
                      WRITE(*,*) 'Details for split order index : ',J
                    ENDIF
                    WRITE(*,*) 'Best estimate (fin,1eps,2eps):',(ANS(I
     $               ,J),I=1,3)
                    WRITE(*,*) 'Finite double precision evaluations :'
     $               ,(DP_RES(1,J,I),I=1,N_DP_EVAL)
                    WRITE(*,*) 'Finite quad   precision evaluations :'
     $               ,(QP_RES(1,J,I),I=1,N_QP_EVAL)
                  ENDIF
                ENDDO
                WRITE(*,*) 'PS point specification :'
                WRITE(*,*) 'Renormalization scale MU_R=',MU_R
                DO I=1,NEXTERNAL
                  WRITE (*,'(i2,1x,4e27.17)') I, P(0,I),P(1,I),P(2,I)
     $             ,P(3,I)
                ENDDO
              ENDIF
              IF(NEPS.EQ.10) THEN
                WRITE(*,*) 'Further output of the details of thes'
     $           //'e unstable PS points will now be suppressed.'
              ENDIF
            ELSE
              I_LIB=INDEX_QP_TOOLS(I_QP_LIB)
              EVAL_DONE(1)=.TRUE.
              DO I=2,MAXSTABILITYLENGTH
                EVAL_DONE(I)=.FALSE.
              ENDDO
              STAB_INDEX=0
              IF(NROTATIONS_QP.GE.1)THEN
                GOTO 200
              ELSE
                GOTO 300
              ENDIF
            ENDIF
          ENDIF
        ELSEIF(.NOT.DOING_QP_EVALS)THEN
          CALL ML5_0_COMPUTE_ACCURACY(DP_RES,N_DP_EVAL,ACC,ANS)
          IF(MAXVAL(ACC).GE.MLSTABTHRES) THEN
            I_LIB=I_LIB+1
            IF((I_LIB.GT.NLOOPLIB.OR.MLREDUCTIONLIB(I_LIB).EQ.0
     $       ).AND.QP_TOOLS_AVAILABLE)THEN
              I_LIB=INDEX_QP_TOOLS(1)
              I_QP_LIB=1
              DOING_QP_EVALS=.TRUE.
              EVAL_DONE(1)=.TRUE.
              DO I=2,MAXSTABILITYLENGTH
                EVAL_DONE(I)=.FALSE.
              ENDDO
              STAB_INDEX=0
              CTMODE=4
              GOTO 200
            ELSEIF(I_LIB.LE.NLOOPLIB.AND.MLREDUCTIONLIB(I_LIB).GT.0
     $       )THEN
              EVAL_DONE(1)=.TRUE.
              DO I=2,MAXSTABILITYLENGTH
                EVAL_DONE(I)=.FALSE.
              ENDDO
              STAB_INDEX=0
              IF(NROTATIONS_DP.GE.1)THEN
                GOTO 200
              ELSE
                GOTO 300
              ENDIF
            ELSE
              DO I=0,NSQUAREDSO
                ACCURACY(I)=ACC(I)
              ENDDO
              RET_CODE_H=4
              RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.FALSE.
     $         ,.FALSE.)
              NEPS=NEPS+1
              IF(NEPS.LE.10) THEN
                WRITE(*,*) '##W03 WARNING An unstable PS point was'
     $           ,       ' detected.'
                WRITE(*,*) '##W03 WARNING No quadruple precision wil'
     $           //'l be used.'
                IF (NSQUAREDSO.NE.1) THEN
                  WRITE(*,*) 'Accuracies for each split orde'
     $             //'r, starting with the summed case'
                  WRITE(*,*) 'DP accuracies (for each split order): '
     $             ,(ACC(I),I=0,NSQUAREDSO)
                ELSE
                  WRITE(*,*) 'DP accuracy: ',ACC(1)
                ENDIF
                DO J=0,NSQUAREDSO
                  IF (NSQUAREDSO.NE.1.OR.J.NE.0) THEN
                    IF (J.EQ.0) THEN
                      WRITE(*,*) 'Details for all split orders summe'
     $                 //'d :'
                    ELSE
                      WRITE(*,*) 'Details for split order index : ',J
                    ENDIF
                    WRITE(*,*) 'Best estimate (fin,1eps,2eps):',(ANS(I
     $               ,J),I=1,3)
                    WRITE(*,*) 'Finite double precision evaluations :'
     $               ,(DP_RES(1,J,I),I=1,N_DP_EVAL)
                  ENDIF
                ENDDO
                WRITE(*,*) 'PS point specification :'
                WRITE(*,*) 'Renormalization scale MU_R=',MU_R
                DO I=1,NEXTERNAL
                  WRITE (*,'(i2,1x,4e27.17)') I, P(0,I),P(1,I),P(2,I)
     $             ,P(3,I)
                ENDDO
              ENDIF
              IF(NEPS.EQ.10) THEN
                WRITE(*,*) 'Further output of the details of thes'
     $           //'e unstable PS points will now be suppressed.'
              ENDIF
            ENDIF
          ELSE
            DO I=0,NSQUAREDSO
              ACCURACY(I)=ACC(I)
            ENDDO
            RET_CODE_H=2
            RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.FALSE.
     $       ,.TRUE.)
          ENDIF
        ENDIF
      ELSE
        RET_CODE_H=1
        DO I=0,NSQUAREDSO
          ACCURACY(I)=-1.0D0
        ENDDO
        RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.FALSE.
     $   ,.FALSE.)
      ENDIF

 9999 CONTINUE

C     Finalize the return code
      IF (MP_DONE_ONCE) THEN
        RET_CODE_T=2
      ELSE
        RET_CODE_T=1
      ENDIF
      IF(CHECKPHASE.OR..NOT.HELDOUBLECHECKED) THEN
        RET_CODE_H=1
        RET_CODE_U=SET_RET_CODE_U(MLREDUCTIONLIB(I_LIB),.FALSE.
     $   ,.FALSE.)
        RET_CODE_T=RET_CODE_T+2
        DO I=0,NSQUAREDSO
          ACCURACY(I)=-1.0D0
        ENDDO
      ENDIF

C     Finally for the summed result in ANS(1:3,0), make sure to only
C     consider the squared order asked for by the user.
C     Notice that this filtering using CHOSEN_SO_CONFIGS happens
C     here only while everywhere else one always considers the sum.
      DO J=1,3
        ANS(J,0)=0.0D0
      ENDDO
      DO I=1,NSQUAREDSO
        IF (CHOSEN_SO_CONFIGS(I)) THEN
          DO J=1,3
            ANS(J,0)=ANS(J,0)+ANS(J,I)
          ENDDO
        ENDIF
      ENDDO

C     Reinitialize the default threshold if it was specified by the
C      user
      IF (USER_STAB_PREC.GT.0.0D0) THEN
        MLSTABTHRES=MLSTABTHRES_BU
        CTMODEINIT=CTMODEINIT_BU
      ENDIF

C     Reinitialize the check phase logicals and the filters if check
C      bypassed
      IF (BYPASS_CHECK) THEN
        CHECKPHASE = OLD_CHECKPHASE
        HELDOUBLECHECKED = OLD_HELDOUBLECHECKED
        DO I=1,NCOMB
          GOODHEL(I)=OLD_GOODHEL(I)
        ENDDO
        DO I=1,NSQUAREDSO
          DO J=1,NLOOPGROUPS
            GOODAMP(I,J)=OLD_GOODAMP(I,J)
          ENDDO
        ENDDO
      ENDIF
      END

C     --=========================================--
C     General Helper functions and subroutine
C     for the main sloopmatrix subroutine
C     --=========================================--

      LOGICAL FUNCTION ML5_0_ISZERO(TOTEST, REFERENCE_VALUE, LOOP
     $ , SOINDEX)
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NLOOPGROUPS
      PARAMETER (NLOOPGROUPS=51)
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
C     
C     ARGUMENTS 
C     
      REAL*8 TOTEST, REFERENCE_VALUE
      INTEGER LOOP, SOINDEX
C     
C     GLOBAL 
C     
      INCLUDE 'MadLoopParams.inc'
      COMPLEX*16 LOOPRES(3,NSQUAREDSO,NLOOPGROUPS)
      LOGICAL S(NSQUAREDSO,NLOOPGROUPS)
      COMMON/ML5_0_LOOPRES/LOOPRES,S
C     ----------
C     BEGIN CODE
C     ----------
      IF(ABS(REFERENCE_VALUE).EQ.0.0D0) THEN
        ML5_0_ISZERO=.FALSE.
        WRITE(*,*) '##E02 ERRROR Reference value for comparison i'
     $   //'s zero.'
        STOP 1
      ELSE
        ML5_0_ISZERO=((ABS(TOTEST)/ABS(REFERENCE_VALUE)).LT.ZEROTHRES)
      ENDIF

      IF(LOOP.NE.-1) THEN
        IF((.NOT.ML5_0_ISZERO).AND.(.NOT.S(SOINDEX,LOOP))) THEN
          WRITE(*,*) '##W01 WARNING Contribution ',LOOP,' of spli'
     $     //'t order ',SOINDEX,' is detected as contributing wit'
     $     //'h CR=',(ABS(TOTEST)/ABS(REFERENCE_VALUE)),' but i'
     $     //'s unstable.'
        ENDIF
      ENDIF

      END

      INTEGER FUNCTION ML5_0_ISSAME(RESA,RESB,REF,USEMAX)
      IMPLICIT NONE
C     This function compares the result from two different helicity
C      configuration A and B
C     It returns 0 if they are not related and (+/-wgt) if A=(+/-wgt)*B
C     .
C     For now, the only wgt implemented is the integer 1 or -1.
C     If useMax is .TRUE., it uses all implemented weights no matter
C      what is HELINITSTARTOVER
C     
C     CONSTANTS
C     
      INTEGER MAX_WGT_TO_TRY
      PARAMETER (MAX_WGT_TO_TRY=2)
C     
C     ARGUMENTS 
C     
      REAL*8 RESA(3), RESB(3)
      REAL*8 REF
      LOGICAL USEMAX
C     
C     LOCAL VARIABLES
C     
      LOGICAL ML5_0_ISZERO
      INTEGER I,J
      INTEGER N_WGT_TO_TRY
      INTEGER WGT_TO_TRY(MAX_WGT_TO_TRY)
      DATA WGT_TO_TRY/1,-1/
C     
C     INCLUDES
C     
      INCLUDE 'MadLoopParams.inc'
C     ----------
C     BEGIN CODE
C     ----------
      ML5_0_ISSAME=0

C     If the helicity can be constructed progressively while allowing
C      inconsistency, then we only allow for weight one comparisons.
      IF (.NOT.HELINITSTARTOVER.AND..NOT.USEMAX) THEN
        N_WGT_TO_TRY=1
      ELSE
        N_WGT_TO_TRY=MAX_WGT_TO_TRY
      ENDIF

      DO I=1,N_WGT_TO_TRY
        DO J=1,3
          IF (ML5_0_ISZERO(ABS(RESB(J)),REF,-1,-1)) THEN
            IF(.NOT.ML5_0_ISZERO(ABS(RESB(J))+ABS(RESA(J)),REF,-1,
     $       -1)) THEN
              GOTO 1231
            ENDIF
C           Be loser for helicity comparison, so bring a factor 100
          ELSEIF(.NOT.ML5_0_ISZERO((RESA(J)/RESB(J))-DBLE(WGT_TO_TRY(I
     $     )),REF*100.0D0,-1,-1)) THEN
            GOTO 1231
          ENDIF
        ENDDO
        ML5_0_ISSAME = WGT_TO_TRY(I)
        RETURN
 1231   CONTINUE
      ENDDO
      END

      SUBROUTINE ML5_0_COMPUTE_ACCURACY(FULLLIST, LENGTH, ACC
     $ , ESTIMATE)
      IMPLICIT NONE
C     
C     PARAMETERS 
C     
      INTEGER MAXSTABILITYLENGTH
      COMMON/ML5_0_STABILITY_TESTS/MAXSTABILITYLENGTH
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
C     
C     ARGUMENTS 
C     
      REAL*8 FULLLIST(3,0:NSQUAREDSO,MAXSTABILITYLENGTH)
      INTEGER LENGTH
      REAL*8 ACC(0:NSQUAREDSO), ESTIMATE(0:3,0:NSQUAREDSO)
C     
C     LOCAL VARIABLES 
C     
      LOGICAL MASK(MAXSTABILITYLENGTH)
      LOGICAL MASK3(3)
      DATA MASK3/.TRUE.,.TRUE.,.TRUE./
      INTEGER I,J,K
      REAL*8 AVG
      REAL*8 DIFF
      REAL*8 ACCURACIES(3)
      REAL*8 LIST(MAXSTABILITYLENGTH)

C     ----------
C     BEGIN CODE
C     ----------
      DO I=1,LENGTH
        MASK(I)=.TRUE.
      ENDDO
      DO I=LENGTH+1,MAXSTABILITYLENGTH
        MASK(I)=.FALSE.
C       For some architectures, it is necessary to initialize all the
C        elements of fulllist(i,j)
C       Beware that if the length provided is incorrect, then this can
C        corrup the fulllist given in argument.
        DO J=0,NSQUAREDSO
          DO K=1,3
            FULLLIST(K,J,I)=0.0D0
          ENDDO
        ENDDO
      ENDDO

      DO K=0,NSQUAREDSO

        DO I=1,3
          DO J=1,MAXSTABILITYLENGTH
            LIST(J)=FULLLIST(I,K,J)
          ENDDO
          DIFF=MAXVAL(LIST,1,MASK)-MINVAL(LIST,1,MASK)
          AVG=(MAXVAL(LIST,1,MASK)+MINVAL(LIST,1,MASK))/2.0D0
          ESTIMATE(I,K)=AVG
          IF (AVG.EQ.0.0D0) THEN
            ACCURACIES(I)=DIFF
          ELSE
            ACCURACIES(I)=DIFF/ABS(AVG)
          ENDIF
        ENDDO

C       The technique below is too sensitive, typically to
C       unstablities in very small poles
C       acc(k)=MAXVAL(ACCURACIES,1,MASK3)
C       The following is used instead
        ACC(K) = 0.0D0
        AVG = 0.0D0
        DO I=1,3
          ACC(K) = ACC(K) + ACCURACIES(I)*ABS(ESTIMATE(I,K))
          AVG = AVG + ESTIMATE(I,K)
        ENDDO
        IF (AVG.NE.0.0D0) THEN
          ACC(K)  = ACC(K) / ( ABS(AVG) / 3.0D0)
        ENDIF

      ENDDO

      END

      SUBROUTINE ML5_0_SET_N_EVALS(N_DP_EVALS,N_QP_EVALS)

      IMPLICIT NONE
      INTEGER N_DP_EVALS, N_QP_EVALS

      INCLUDE 'MadLoopParams.inc'

      IF(CTMODERUN.LE.-1) THEN
        N_DP_EVALS=2+NROTATIONS_DP
        N_QP_EVALS=2+NROTATIONS_QP
      ELSE
        N_DP_EVALS=1
        N_QP_EVALS=1
      ENDIF

      IF(N_DP_EVALS.GT.20.OR.N_QP_EVALS.GT.20) THEN
        WRITE(*,*) 'ERROR:: Increase hardcoded maxstabilitylength.'
        STOP 1
      ENDIF

      END

C     THIS SUBROUTINE SIMPLY SET THE GLOBAL PS CONFIGURATION GLOBAL
C      VARIABLES FROM A GIVEN VARIABLE IN DOUBLE PRECISION
      SUBROUTINE ML5_0_SET_MP_PS(P)

      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      REAL*16 MP_PS(0:3,NEXTERNAL),MP_P(0:3,NEXTERNAL)
      COMMON/ML5_0_MP_PSPOINT/MP_PS,MP_P
      REAL*8 P(0:3,NEXTERNAL)

      DO I=1,NEXTERNAL
        DO J=0,3
          MP_PS(J,I)=P(J,I)
        ENDDO
      ENDDO
      CALL ML5_0_MP_IMPROVE_PS_POINT_PRECISION(MP_PS)
      DO I=1,NEXTERNAL
        DO J=0,3
          MP_P(J,I)=MP_PS(J,I)
        ENDDO
      ENDDO

      END

C     --=========================================--
C     Functions for dealing with the ordering
C     and indexing of split order contributions
C     --=========================================--

      SUBROUTINE ML5_0_GET_NSQSO_LOOP(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned in ANS when calling sloopmatrix 
C     
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

      SUBROUTINE ML5_0_GET_ANSWER_DIMENSION(ANS_DIM)
C     
C     MadLoop subroutines return an array of dimension ANS(0:3,0:ANS_DI
C     M)
C     In order for the user program to be able to correctly declare
C      this
C     array when calling MadLoop, this subroutine returns its dimension
C     
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
      INTEGER ANS_DIM

      INCLUDE 'nsqso_born.inc'

      ANS_DIM=MAX(NSQSO_BORN,NSQUAREDSO)

      END

      INTEGER FUNCTION ML5_0_ML5SOINDEX_FOR_SQUARED_ORDERS(ORDERS)
C     
C     This functions returns the integer index identifying the split
C      orders list passed in argument which correspond to the values
C      of the following list of couplings (and in this order):
C     ['QCD', 'QED']
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=2, NSQSO=3)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQPLITORDERS(NSQSO,NSO)
      DATA (SQPLITORDERS(  1,I),I=  1,  2) /    4,    2/
      DATA (SQPLITORDERS(  2,I),I=  1,  2) /    2,    4/
      DATA (SQPLITORDERS(  3,I),I=  1,  2) /    0,    6/
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQPLITORDERS(I,J)) GOTO 1009
        ENDDO
        ML5_0_ML5SOINDEX_FOR_SQUARED_ORDERS = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function ML5_0_ML5SOINDEX_FOR_SQUAR'
     $ //'ED_ORDERS'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      INTEGER FUNCTION ML5_0_ML5SOINDEX_FOR_BORN_AMP(AMPID)
C     
C     For a given born amplitude number, it returns the ID of the
C      split orders it has
C     
C     CONSTANTS
C     
      INTEGER NBORNAMPS
      PARAMETER (NBORNAMPS=4)
C     
C     ARGUMENTS
C     
      INTEGER AMPID
C     
C     LOCAL VARIABLES
C     
      INTEGER BORNAMPORDERS(NBORNAMPS)
      DATA (BORNAMPORDERS(I),I=  1,  4) /    1,    2,    2,    2/
C     -----------
C     BEGIN CODE
C     -----------
      IF (AMPID.GT.NBORNAMPS) THEN
        WRITE(*,*) 'ERROR:: Born amplitude ID ',AMPID,' above th'
     $   //'e maximum ',NBORNAMPS
      ENDIF
      ML5_0_ML5SOINDEX_FOR_BORN_AMP = BORNAMPORDERS(AMPID)

      END

      INTEGER FUNCTION ML5_0_ML5SOINDEX_FOR_LOOP_AMP(AMPID)
C     
C     For a given loop amplitude number, it returns the ID of the
C      split orders it has
C     
C     CONSTANTS
C     
      INTEGER    NLOOPAMPS
      PARAMETER (NLOOPAMPS=262)
C     
C     ARGUMENTS
C     
      INTEGER AMPID
C     
C     LOCAL VARIABLES
C     
      INTEGER LOOPAMPORDERS(NLOOPAMPS)
      DATA (LOOPAMPORDERS(I),I=  1,  5) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=  6, 10) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I= 11, 15) /    3,    3,    3,    3,    4/
      DATA (LOOPAMPORDERS(I),I= 16, 20) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 21, 25) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 26, 30) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 31, 35) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 36, 40) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 41, 45) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 46, 50) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 51, 55) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 56, 60) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 61, 65) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 66, 70) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 71, 75) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 76, 80) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 81, 85) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 86, 90) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 91, 95) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I= 96,100) /    4,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=101,105) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=106,110) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=111,115) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=116,120) /    3,    3,    3,    3,    3/
      DATA (LOOPAMPORDERS(I),I=121,125) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=126,130) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=131,135) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=136,140) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=141,145) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=146,150) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=151,155) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=156,160) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=161,165) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=166,170) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=171,175) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=176,180) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=181,185) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=186,190) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=191,195) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=196,200) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=201,205) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=206,210) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=211,215) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=216,220) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=221,225) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=226,230) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=231,235) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=236,240) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=241,245) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=246,250) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=251,255) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=256,260) /    4,    4,    4,    4,    4/
      DATA (LOOPAMPORDERS(I),I=261,262) /    4,    4/
C     -----------
C     BEGIN CODE
C     -----------
      IF (AMPID.GT.NLOOPAMPS) THEN
        WRITE(*,*) 'ERROR:: Loop amplitude ID ',AMPID,' above th'
     $   //'e maximum ',NLOOPAMPS
      ENDIF
      ML5_0_ML5SOINDEX_FOR_LOOP_AMP = LOOPAMPORDERS(AMPID)

      END


      INTEGER FUNCTION ML5_0_ML5SQSOINDEX(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the corresponding
C      index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=2, NSQUAREDSO=3, NAMPSO=4)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  2) /    2,    0/
      DATA (AMPSPLITORDERS(  2,I),I=  1,  2) /    0,    2/
      DATA (AMPSPLITORDERS(  3,I),I=  1,  2) /    2,    2/
      DATA (AMPSPLITORDERS(  4,I),I=  1,  2) /    0,    4/
C     
C     FUNCTION
C     
      INTEGER ML5_0_ML5SOINDEX_FOR_SQUARED_ORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)+AMPSPLITORDERS(ORDERI
     $   NDEXB,I)
      ENDDO
      ML5_0_ML5SQSOINDEX=ML5_0_ML5SOINDEX_FOR_SQUARED_ORDERS(SQORDERS)
      END

C     --=========================================--
C     Definition of additional access routines
C     --=========================================--

      SUBROUTINE ML5_0_FORCE_STABILITY_CHECK(ONOFF)
C     
C     This function can be called by the MadLoop user so as to always
C      have stability
C     checked, even during initialisation, when calling the *_thres
C      routines.
C     
      LOGICAL ONOFF

      LOGICAL BYPASS_CHECK, ALWAYS_TEST_STABILITY
      DATA BYPASS_CHECK, ALWAYS_TEST_STABILITY /.FALSE.,.FALSE./
      COMMON/ML5_0_BYPASS_CHECK/BYPASS_CHECK, ALWAYS_TEST_STABILITY

      ALWAYS_TEST_STABILITY = ONOFF

      END

      SUBROUTINE ML5_0_SET_COUPLINGORDERS_TARGET(SOTARGET)
      IMPLICIT NONE
C     
C     This routine can be accessed by an external user to set the
C      squared split order target.
C     If set to a value different than -1, the code will try to avoid
C      computing anything which
C     does not contribute to contributions of squared split orders
C      SQSO_TARGET and below.
C     This can considerably speed up the code. However, keep in mind
C      that any contribution of
C     'squared order index' larger than SQSO_TARGET cannot be trust.
C     
C     ARGUMENTS
C     
      INTEGER SOTARGET
C     
C     GLOBAL
C     
      INTEGER SQSO_TARGET
      COMMON/ML5_0_SOCHOICE/SQSO_TARGET
C     ----------
C     BEGIN CODE
C     ----------
      SQSO_TARGET = SOTARGET
      END

      SUBROUTINE ML5_0_SLOOPMATRIXHEL(P,HEL,ANS)
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      REAL*8 ANS(0:3,0:NSQUAREDSO)
      INTEGER HEL, USERHEL
      COMMON/ML5_0_USERCHOICE/USERHEL
C     ----------
C     BEGIN CODE
C     ----------
      USERHEL=HEL
      CALL ML5_0_SLOOPMATRIX(P,ANS)
      END

      SUBROUTINE ML5_0_SLOOPMATRIXHEL_THRES(P,HEL,ANS,PREC_ASKED
     $ ,PREC_FOUND,RET_CODE)
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      REAL*8 ANS(0:3,0:NSQUAREDSO)
      INTEGER HEL, RET_CODE
      REAL*8 PREC_ASKED,PREC_FOUND(0:NSQUAREDSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
C     
C     GLOBAL VARIABLES
C     
      REAL*8 USER_STAB_PREC
      COMMON/ML5_0_USER_STAB_PREC/USER_STAB_PREC

      INTEGER H,T,U
      REAL*8 ACCURACY(0:NSQUAREDSO)
      COMMON/ML5_0_ACC/ACCURACY,H,T,U

      LOGICAL BYPASS_CHECK, ALWAYS_TEST_STABILITY
      COMMON/ML5_0_BYPASS_CHECK/BYPASS_CHECK, ALWAYS_TEST_STABILITY

C     ----------
C     BEGIN CODE
C     ----------
      USER_STAB_PREC = PREC_ASKED

      CALL ML5_0_SLOOPMATRIXHEL(P,HEL,ANS)
      IF(ALWAYS_TEST_STABILITY.AND.(H.EQ.1.OR.ACCURACY(0).LT.0.0D0)
     $ ) THEN
        BYPASS_CHECK = .TRUE.
        CALL ML5_0_SLOOPMATRIXHEL(P,HEL,ANS)
        BYPASS_CHECK = .FALSE.
C       Make sure we correctly return an initialization-type T code
        IF (T.EQ.2) T=4
        IF (T.EQ.1) T=3
      ENDIF

C     Reset it to default value not to affect next runs
      USER_STAB_PREC = -1.0D0

      DO I=0,NSQUAREDSO
        PREC_FOUND(I)=ACCURACY(I)
      ENDDO
      RET_CODE=100*H+10*T+U

      END

      SUBROUTINE ML5_0_SLOOPMATRIX_THRES(P,ANS,PREC_ASKED,PREC_FOUND
     $ ,RET_CODE)
C     
C     Inputs are:
C     P(0:3, Nexternal)  double  :: Kinematic configuration (E,px,py,pz
C     )
C     PEC_ASKED          double  :: Target relative accuracy, -1 for
C      default
C     
C     Outputs are:
C     ANS(3)             double  :: Result (finite, single pole,
C      double pole) 
C     PREC_FOUND         double  :: Relative accuracy estimated for
C      the result
C     Returns -1 if no stab test could be performed.
C     RET_CODE			 integer :: Return code. See below for details
C     
C     Return code conventions: RET_CODE = H*100 + T*10 + U
C     
C     H == 1
C     Stability unknown.
C     H == 2
C     Stable PS (SPS) point.
C     No stability rescue was necessary.
C     H == 3
C     Unstable PS (UPS) point.
C     Stability rescue necessary, and successful.
C     H == 4
C     Exceptional PS (EPS) point.
C     Stability rescue attempted, but unsuccessful.
C     
C     T == 1
C     Default computation (double prec.) was performed.
C     T == 2
C     Quadruple precision was used for this PS point.
C     T == 3
C     MadLoop in initialization phase. Only double precision used.
C     T == 4
C     MadLoop in initialization phase. Quadruple precision used.
C     
C     U == 0
C     Not stable.
C     U == 1
C     Stable with CutTools in double precision.
C     U == 2
C     Stable with PJFry++.
C     U == 3
C     Stable with IREGI.
C     U == 9
C     Stable with CutTools in quadruple precision.         
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      INTEGER    NSQUAREDSO
      PARAMETER (NSQUAREDSO=3)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      REAL*8 ANS(0:3,0:NSQUAREDSO)
      REAL*8 PREC_ASKED,PREC_FOUND(0:NSQUAREDSO)
      INTEGER RET_CODE
C     
C     LOCAL VARIABLES
C     
      INTEGER I
C     
C     GLOBAL VARIABLES
C     
      REAL*8 USER_STAB_PREC
      COMMON/ML5_0_USER_STAB_PREC/USER_STAB_PREC

      INTEGER H,T,U
      REAL*8 ACCURACY(0:NSQUAREDSO)
      COMMON/ML5_0_ACC/ACCURACY,H,T,U

      LOGICAL BYPASS_CHECK, ALWAYS_TEST_STABILITY
      COMMON/ML5_0_BYPASS_CHECK/BYPASS_CHECK, ALWAYS_TEST_STABILITY

C     ----------
C     BEGIN CODE
C     ----------
      USER_STAB_PREC = PREC_ASKED
      CALL ML5_0_SLOOPMATRIX(P,ANS)
      IF(ALWAYS_TEST_STABILITY.AND.(H.EQ.1.OR.ACCURACY(0).LT.0.0D0)
     $ ) THEN
        BYPASS_CHECK = .TRUE.
        CALL ML5_0_SLOOPMATRIX(P,ANS)
        BYPASS_CHECK = .FALSE.
C       Make sure we correctly return an initialization-type T code
        IF (T.EQ.2) T=4
        IF (T.EQ.1) T=3
      ENDIF

C     Reset it to default value not to affect next runs
      USER_STAB_PREC = -1.0D0
      DO I=0,NSQUAREDSO
        PREC_FOUND(I)=ACCURACY(I)
      ENDDO
      RET_CODE=100*H+10*T+U

      END



      SUBROUTINE P1_BORN(P,NHEL)
C     
C     Generated by MadGraph5_aMC@NLO v. %(version)s, %(date)s
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: u u~ > u u~ [ QCD ] WEIGHTED=6 @1
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=2)
      INTEGER    NEXTERNAL
      PARAMETER (NEXTERNAL=4)
      INTEGER    NWAVEFUNCS, NCOLOR
      PARAMETER (NWAVEFUNCS=5, NCOLOR=2)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR)
      COMMON/P1_JAMP/JAMP

      COMPLEX*16 W(18,NWAVEFUNCS)
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/
C     
C     GLOBAL VARIABLES
C     
      INCLUDE 'coupl.inc'

C     
C     COLOR DATA
C     
      DATA DENOM(1)/1/
      DATA (CF(I,  1),I=  1,  2) /    9,    3/
C     1 T(2,1) T(3,4)
      DATA DENOM(2)/1/
      DATA (CF(I,  2),I=  1,  2) /    3,    9/
C     1 T(2,4) T(3,1)
C     ----------
C     BEGIN CODE
C     ----------
      DO I=1,NEXTERNAL
        IC(I) = 1
      ENDDO

      CALL IXXXXX(P(0,1),ZERO,NHEL(1),+1*IC(1),W(1,1))
      CALL OXXXXX(P(0,2),ZERO,NHEL(2),-1*IC(2),W(1,2))
      CALL OXXXXX(P(0,3),ZERO,NHEL(3),+1*IC(3),W(1,3))
      CALL IXXXXX(P(0,4),ZERO,NHEL(4),-1*IC(4),W(1,4))
      CALL FFV1P0_3(W(1,1),W(1,2),GC_5,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 1
      CALL FFV1_0(W(1,4),W(1,3),W(1,5),GC_5,AMP(1))
      CALL FFV1P0_3(W(1,1),W(1,3),GC_5,ZERO,ZERO,W(1,5))
C     Amplitude(s) for diagram number 2
      CALL FFV1_0(W(1,4),W(1,2),W(1,5),GC_5,AMP(2))
      JAMP(1)=+1D0/2D0*(+1D0/3D0*AMP(1)+AMP(2))
      JAMP(2)=+1D0/2D0*(-AMP(1)-1D0/3D0*AMP(2))

      END

      SUBROUTINE P1_GET_JAMP(NJAMP, ONEJAMP)

      INTEGER     NCOLOR, NJAMP
      PARAMETER (NCOLOR=2)
      COMPLEX*16  JAMP(NCOLOR), ONEJAMP
      COMMON/P1_JAMP/JAMP

      ONEJAMP = JAMP[NJAMP+1]  ! +1 since njamp start at zero (c convention)
      END

      SUBROUTINE P1_GET_NCOLOR(IN1, IN2, OUT)

      INTEGER IN1, IN2, OUT

      IF (IN1.EQ.0.AND.IN2.EQ.1)THEN
        OUT = 4


      ELSEIF (IN1.EQ.1.AND.IN2.EQ.2)THEN
        OUT = 0


      ELSEIF (IN1.EQ.0.AND.IN2.EQ.0)THEN
        OUT = 2


      ELSEIF (IN1.EQ.1.AND.IN2.EQ.1)THEN
        OUT = 1


      ELSEIF (IN1.EQ.1.AND.IN2.EQ.0)THEN
        OUT = 3


      ELSEIF (IN1.EQ.0.AND.IN2.EQ.2)THEN
        OUT = 0

      ELSE
        STOP 1
      ENDIF
      END

      SUBROUTINE P1_GET_NCOL(NCOL)
      INTEGER NCOL
      NCOL = 2
      RETURN
      END

